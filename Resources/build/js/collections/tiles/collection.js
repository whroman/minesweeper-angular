angular.module("CollectTiles",["ModelTile","angularLocalStorage"]).factory("CollectTiles",function(storage,ModelTile){var add,autoSelect,clearNeighbors,exposeToModel,get,getAll,loadGame,newGame,randomSafeTile,tallyMines,tiles;return tiles=[],exposeToModel=function(){return{collection:{get:function(_this){return function(attrs){return _this.get(attrs)}}(this),getAll:function(_this){return function(attrs){return _this.getAll(attrs)}}(this)}}},get=function(attrs){return this.getAll(attrs)[0]},getAll=function(attrs){var key,matches,numOfAttrs,numOfMatchedAttrs,tile,val,_i,_j,_len,_len1,_ref,_ref1;if(matches=[],void 0===attrs)for(_ref=this.tiles,_i=0,_len=_ref.length;_len>_i;_i++)tile=_ref[_i],matches.push(tile);else for(_ref1=this.tiles,_j=0,_len1=_ref1.length;_len1>_j;_j++){tile=_ref1[_j],numOfAttrs=0,numOfMatchedAttrs=0;for(key in attrs)val=attrs[key],numOfAttrs++,tile.model[key]===val&&numOfMatchedAttrs++;numOfMatchedAttrs===numOfAttrs&&matches.push(tile)}return matches},tallyMines=function(){var adjacentTile,neighborAttrs,neighborMine,neighborMines,neighborX,neighborY,tile,_i,_j,_len,_len1,_ref,_ref1;for(_ref=this.getAll(),_i=0,_len=_ref.length;_len>_i;_i++){for(tile=_ref[_i],neighborMines=0,_ref1=tile.adjacentTiles,_j=0,_len1=_ref1.length;_len1>_j;_j++)adjacentTile=_ref1[_j],neighborX=tile.model.x+adjacentTile[0],neighborY=tile.model.y+adjacentTile[1],neighborAttrs={isMine:!0,x:neighborX,y:neighborY},neighborMine=this.get(neighborAttrs),void 0!==neighborMine&&neighborMines++;tile.model.adjacentMines=neighborMines}return this},randomSafeTile=function(){var findAttrs,randomTile,safeTiles;return findAttrs={isClear:!1,isMine:!1},safeTiles=this.getAll(findAttrs),randomTile=safeTiles[Math.floor(Math.random()*safeTiles.length)]},autoSelect=function(num){for(var tile;num--;)tile=this.randomSafeTile(),console.log(tile),tile.clear();return this.tiles},newGame=function(sizeX,sizeY,numOfMines){var attrs,mineNum,tile,x,y,_i,_j,_k,_ref,_ref1;for(this.tiles=[],y=_i=0,_ref=sizeY-1;_ref>=0?_ref>=_i:_i>=_ref;y=_ref>=0?++_i:--_i)for(x=_j=0,_ref1=sizeX-1;_ref1>=0?_ref1>=_j:_j>=_ref1;x=_ref1>=0?++_j:--_j)attrs={x:x,y:y},this.add(attrs);for(mineNum=_k=1;numOfMines>=1?numOfMines>=_k:_k>=numOfMines;mineNum=numOfMines>=1?++_k:--_k)tile=this.randomSafeTile(),tile.model.isMine=!0;return this.tallyMines(),this},loadGame=function(savedTiles){var tile,_i,_len;for(this.tiles=[],_i=0,_len=savedTiles.length;_len>_i;_i++)tile=savedTiles[_i],this.add(tile.model);return this},add=function(model){var tile;return tile=new ModelTile(model),this.tiles.push(tile)},clearNeighbors=function(tile){var adjacentTile,neighbor,_i,_len,_ref,_results;if(0===tile.model.adjacentMines&&tile.model.isMine===!1){for(console.log(this),_ref=tile.adjacentTiles,_results=[],_i=0,_len=_ref.length;_len>_i;_i++)adjacentTile=_ref[_i],neighbor=this.get({x:tile.model.x+adjacentTile[0],y:tile.model.y+adjacentTile[1]}),_results.push(void 0!==neighbor?neighbor.model.isClear===!1&&neighbor.model.isMine===!1?neighbor.clear():void 0:void 0);return _results}},{tiles:tiles,newGame:newGame,loadGame:loadGame,randomSafeTile:randomSafeTile,tallyMines:tallyMines,get:get,getAll:getAll,add:add,autoSelect:autoSelect,exposeToModel:exposeToModel,clearNeighbors:clearNeighbors}});
//# sourceMappingURL=data:application/json;base64,