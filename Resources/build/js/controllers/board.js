angular.module("CtrlBoard",["ngSlider","CollectTiles","ModelSliders","ModelModals","ModelBoardInfo"]).controller("CtrlBoard",function($scope,storage,CollectTiles,ModelSliders,ModelModals,ModelBoardInfo){var currentBoard,init,noMineFirstClick,tiles;return noMineFirstClick=function(tile){return 0===$scope.info.numOfClears&&tile.model.isMine===!0&&(tile.model.isMine=!1,currentBoard.randomSafeTile().model.isMine=!0,currentBoard.tallyMines()),tile},init=function(boardInstance,info){var board;return board=void 0,board=null===storage.get("tiles")?boardInstance.newGame(info.x.val,info.y.val,info.mines.val):boardInstance.loadGame(storage.get("tiles")),storage.bind($scope,"tiles"),board},$scope.modals=ModelModals.set("Resources/templates/modals/",["instructions","newGame"]),$scope.sliders=ModelSliders.init(5,20,10),currentBoard=init(CollectTiles,$scope.sliders.info),$scope.tiles=currentBoard.tiles,$scope.info=ModelBoardInfo,$scope.ui={autoSelect:function(num){return $scope.tiles=currentBoard.autoSelect(num)},newGame:function(sizeX,sizeY,numOfMines){return currentBoard=CollectTiles.newGame(sizeX,sizeY,numOfMines),$scope.tiles=currentBoard.tiles,$scope.modals.reset(),currentBoard},tileClick:function(event,tile){return event.shiftKey===!0||event.altKey===!0?tile.toggleFlag():(noMineFirstClick(tile),tile.clear()),tile}},tiles={watchedAttrs:["isClear","isFlagged"],watch:function(){var tile,toWatch,watchedAttr,_i,_j,_len,_len1,_ref,_ref1;for(toWatch=[],_ref=$scope.tiles,_i=0,_len=_ref.length;_len>_i;_i++)for(tile=_ref[_i],_ref1=this.watchedAttrs,_j=0,_len1=_ref1.length;_len1>_j;_j++)watchedAttr=_ref1[_j],toWatch.push(tile.model[watchedAttr]);return toWatch},onChange:function(){return $scope.info.update($scope.tiles),$scope.tiles}},$scope.$watchCollection(tiles.watch.bind(tiles),tiles.onChange),$scope.$on("Tile:Clear",function($ev,tile){return $scope.tiles.clearNeighbors(tile)}),window.logScope=function(){return window.$scope=$scope}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2JvYXJkLmNvZmZlZSIsImNvbnRyb2xsZXJzL2JvYXJkLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwic3RvcmFnZSIsIkNvbGxlY3RUaWxlcyIsIk1vZGVsU2xpZGVycyIsIk1vZGVsTW9kYWxzIiwiTW9kZWxCb2FyZEluZm8iLCJjdXJyZW50Qm9hcmQiLCJpbml0Iiwibm9NaW5lRmlyc3RDbGljayIsInRpbGVzIiwidGlsZSIsImluZm8iLCJudW1PZkNsZWFycyIsIm1vZGVsIiwiaXNNaW5lIiwicmFuZG9tU2FmZVRpbGUiLCJ0YWxseU1pbmVzIiwiYm9hcmRJbnN0YW5jZSIsImJvYXJkIiwiZ2V0IiwibmV3R2FtZSIsIngiLCJ2YWwiLCJ5IiwibWluZXMiLCJsb2FkR2FtZSIsImJpbmQiLCJtb2RhbHMiLCJzZXQiLCJzbGlkZXJzIiwidWkiLCJhdXRvU2VsZWN0IiwibnVtIiwic2l6ZVgiLCJzaXplWSIsIm51bU9mTWluZXMiLCJyZXNldCIsInRpbGVDbGljayIsImV2ZW50Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJ0b2dnbGVGbGFnIiwiY2xlYXIiLCJ3YXRjaGVkQXR0cnMiLCJ3YXRjaCIsInRvV2F0Y2giLCJ3YXRjaGVkQXR0ciIsIl9pIiwiX2oiLCJfbGVuIiwiX2xlbjEiLCJfcmVmIiwiX3JlZjEiLCJsZW5ndGgiLCJ0aGlzIiwicHVzaCIsIm9uQ2hhbmdlIiwidXBkYXRlIiwiJHdhdGNoQ29sbGVjdGlvbiIsIiRvbiIsIiRldiIsImNsZWFyTmVpZ2hib3JzIiwid2luZG93IiwibG9nU2NvcGUiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUNDQyxPQUFPLGFBR0osV0FDQSxlQUNBLGVBQ0EsY0FDQSxtQkFHSEMsV0FBVyxZQUFhLFNBQ3JCQyxPQUNBQyxRQUNBQyxhQUNBQyxhQUNBQyxZQUNBQyxnQkFFQSxHQUFBQyxjQUFBQyxLQUFBQyxpQkFBQUMsS0NvREYsT0RwREVELGtCQUFtQixTQUFDRSxNQU1oQixNQUw4QixLQUEzQlYsT0FBT1csS0FBS0MsYUFBcUJGLEtBQUtHLE1BQU1DLFVBQVUsSUFDckRKLEtBQUtHLE1BQU1DLFFBQVMsRUFDcEJSLGFBQWFTLGlCQUFpQkYsTUFBTUMsUUFBUyxFQUM3Q1IsYUFBYVUsY0FFVk4sTUFFWEgsS0FBTyxTQUFDVSxjQUFlTixNQUNuQixHQUFBTyxNQVFBLE9BUkFBLE9BQVMsT0FFTEEsTUFEdUIsT0FBeEJqQixRQUFRa0IsSUFBSSxTQUNIRixjQUFjRyxRQUFRVCxLQUFLVSxFQUFFQyxJQUFLWCxLQUFLWSxFQUFFRCxJQUFLWCxLQUFLYSxNQUFNRixLQUV6REwsY0FBY1EsU0FBU3hCLFFBQVFrQixJQUFJLFVBRS9DbEIsUUFBUXlCLEtBQUsxQixPQUFRLFNBRWRrQixPQUVYbEIsT0FBTzJCLE9BQVN2QixZQUFZd0IsSUFDeEIsK0JBRUksZUFDQSxZQUlSNUIsT0FBTzZCLFFBQVUxQixhQUFhSSxLQUFLLEVBQUcsR0FBSSxJQUUxQ0QsYUFBZUMsS0FBS0wsYUFBY0YsT0FBTzZCLFFBQVFsQixNQUVqRFgsT0FBT1MsTUFBUUgsYUFBYUcsTUFDNUJULE9BQU9XLEtBQU9OLGVBRWRMLE9BQU84QixJQUNIQyxXQUFZLFNBQUNDLEtDMUJmLE1EMkJNaEMsUUFBT1MsTUFBUUgsYUFBYXlCLFdBQVdDLE1BRTNDWixRQUFTLFNBQUNhLE1BQU9DLE1BQU9DLFlBT3BCLE1BTkE3QixjQUFlSixhQUFha0IsUUFBUWEsTUFBT0MsTUFBT0MsWUFFbERuQyxPQUFPUyxNQUFRSCxhQUFhRyxNQUU1QlQsT0FBTzJCLE9BQU9TLFFBRVA5QixjQUVYK0IsVUFBVyxTQUFDQyxNQUFPNUIsTUFPZixNQU5HNEIsT0FBTUMsWUFBWSxHQUFRRCxNQUFNRSxVQUFVLEVBQ3pDOUIsS0FBSytCLGNBRUxqQyxpQkFBaUJFLE1BQ2pCQSxLQUFLZ0MsU0FFRmhDLE9BSWZELE9BQ0lrQyxjQUNJLFVBQ0EsYUFHSkMsTUFBTyxXQUNILEdBQUFsQyxNQUFBbUMsUUFBQUMsWUFBQUMsR0FBQUMsR0FBQUMsS0FBQUMsTUFBQUMsS0FBQUMsS0FDQSxLQURBUCxXQUNBTSxLQUFBbkQsT0FBQVMsTUFBQXNDLEdBQUEsRUFBQUUsS0FBQUUsS0FBQUUsT0FBQUosS0FBQUYsR0FBQUEsS0FDSSxJQ2pDUnJDLEtBQU95QyxLQUFLSixJRGlDSkssTUFBQUUsS0FBQVgsYUFBQUssR0FBQSxFQUFBRSxNQUFBRSxNQUFBQyxPQUFBSCxNQUFBRixHQUFBQSxLQzlCTkYsWUFBY00sTUFBTUosSUQrQlZILFFBQVFVLEtBQUs3QyxLQUFLRyxNQUFNaUMsYUFDaEMsT0FBT0QsVUFFWFcsU0FBVSxXQUVOLE1BREF4RCxRQUFPVyxLQUFLOEMsT0FBT3pELE9BQU9TLE9BQ25CVCxPQUFPUyxRQUd0QlQsT0FBTzBELGlCQUFpQmpELE1BQU1tQyxNQUFNbEIsS0FBS2pCLE9BQVFBLE1BQU0rQyxVQUV2RHhELE9BQU8yRCxJQUFJLGFBQWMsU0FBQ0MsSUFBS2xELE1DNUIvQixNRDZCSVYsUUFBT1MsTUFBTW9ELGVBQWVuRCxRQUVoQ29ELE9BQU9DLFNBQVcsV0M1QmxCLE1ENkJJRCxRQUFPOUQsT0FBU0EiLCJmaWxlIjoiY29udHJvbGxlcnMvYm9hcmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyXG4ubW9kdWxlICdDdHJsQm9hcmQnLFxuIyBEZXBlbmRlbmNpZXNcbltcbiAgICAnbmdTbGlkZXInLFxuICAgICdDb2xsZWN0VGlsZXMnLFxuICAgICdNb2RlbFNsaWRlcnMnLFxuICAgICdNb2RlbE1vZGFscycsXG4gICAgJ01vZGVsQm9hcmRJbmZvJ1xuXVxuXG4uY29udHJvbGxlciAnQ3RybEJvYXJkJywgKFxuICAgICRzY29wZSxcbiAgICBzdG9yYWdlLFxuICAgIENvbGxlY3RUaWxlcyxcbiAgICBNb2RlbFNsaWRlcnMsXG4gICAgTW9kZWxNb2RhbHMsXG4gICAgTW9kZWxCb2FyZEluZm9cbikgLT5cbiAgICBub01pbmVGaXJzdENsaWNrID0gKHRpbGUpIC0+XG4gICAgICAgIGlmICRzY29wZS5pbmZvLm51bU9mQ2xlYXJzIGlzIDAgYW5kIHRpbGUubW9kZWwuaXNNaW5lIGlzIHRydWVcbiAgICAgICAgICAgIHRpbGUubW9kZWwuaXNNaW5lID0gZmFsc2VcbiAgICAgICAgICAgIGN1cnJlbnRCb2FyZC5yYW5kb21TYWZlVGlsZSgpLm1vZGVsLmlzTWluZSA9IHRydWVcbiAgICAgICAgICAgIGN1cnJlbnRCb2FyZC50YWxseU1pbmVzKClcblxuICAgICAgICByZXR1cm4gdGlsZVxuXG4gICAgaW5pdCA9IChib2FyZEluc3RhbmNlLCBpbmZvKSAtPlxuICAgICAgICBib2FyZCAgPSB1bmRlZmluZWRcbiAgICAgICAgaWYgc3RvcmFnZS5nZXQoJ3RpbGVzJykgPT0gbnVsbFxuICAgICAgICAgICAgYm9hcmQgPSBib2FyZEluc3RhbmNlLm5ld0dhbWUgaW5mby54LnZhbCwgaW5mby55LnZhbCwgaW5mby5taW5lcy52YWxcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYm9hcmQgPSBib2FyZEluc3RhbmNlLmxvYWRHYW1lIHN0b3JhZ2UuZ2V0KCd0aWxlcycpXG5cbiAgICAgICAgc3RvcmFnZS5iaW5kICRzY29wZSwgJ3RpbGVzJ1xuXG4gICAgICAgIHJldHVybiBib2FyZFxuXG4gICAgJHNjb3BlLm1vZGFscyA9IE1vZGVsTW9kYWxzLnNldChcbiAgICAgICAgJ1Jlc291cmNlcy90ZW1wbGF0ZXMvbW9kYWxzLycsXG4gICAgICAgIFtcbiAgICAgICAgICAgICdpbnN0cnVjdGlvbnMnLFxuICAgICAgICAgICAgJ25ld0dhbWUnXG4gICAgICAgIF1cbiAgICApXG5cbiAgICAkc2NvcGUuc2xpZGVycyA9IE1vZGVsU2xpZGVycy5pbml0IDUsIDIwLCAxMFxuXG4gICAgY3VycmVudEJvYXJkID0gaW5pdCBDb2xsZWN0VGlsZXMsICRzY29wZS5zbGlkZXJzLmluZm9cblxuICAgICRzY29wZS50aWxlcyA9IGN1cnJlbnRCb2FyZC50aWxlc1xuICAgICRzY29wZS5pbmZvID0gTW9kZWxCb2FyZEluZm9cblxuICAgICRzY29wZS51aSA9IHtcbiAgICAgICAgYXV0b1NlbGVjdDogKG51bSkgLT5cbiAgICAgICAgICAgICRzY29wZS50aWxlcyA9IGN1cnJlbnRCb2FyZC5hdXRvU2VsZWN0IG51bVxuXG4gICAgICAgIG5ld0dhbWU6IChzaXplWCwgc2l6ZVksIG51bU9mTWluZXMpIC0+XG4gICAgICAgICAgICBjdXJyZW50Qm9hcmQgPSBDb2xsZWN0VGlsZXMubmV3R2FtZSBzaXplWCwgc2l6ZVksIG51bU9mTWluZXNcblxuICAgICAgICAgICAgJHNjb3BlLnRpbGVzID0gY3VycmVudEJvYXJkLnRpbGVzXG5cbiAgICAgICAgICAgICRzY29wZS5tb2RhbHMucmVzZXQoKVxuXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEJvYXJkXG5cbiAgICAgICAgdGlsZUNsaWNrOiAoZXZlbnQsIHRpbGUpIC0+XG4gICAgICAgICAgICBpZiBldmVudC5zaGlmdEtleSBpcyB0cnVlIG9yIGV2ZW50LmFsdEtleSBpcyB0cnVlXG4gICAgICAgICAgICAgICAgdGlsZS50b2dnbGVGbGFnKClcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBub01pbmVGaXJzdENsaWNrKHRpbGUpXG4gICAgICAgICAgICAgICAgdGlsZS5jbGVhcigpXG5cbiAgICAgICAgICAgIHJldHVybiB0aWxlXG4gICAgfVxuXG4gICAgIyBVcGRhdGUgZ2FtZSBpbmZvIHdoZW4gY2hhbmdlIHRvIHByb3BlcnRpZXMgbGlzdGVkIGJlbG93IGNoYW5nZSBmb3IgYW55IHRpbGVcbiAgICB0aWxlcyA9IHtcbiAgICAgICAgd2F0Y2hlZEF0dHJzOiBbXG4gICAgICAgICAgICAnaXNDbGVhcicsXG4gICAgICAgICAgICAnaXNGbGFnZ2VkJ1xuICAgICAgICBdXG5cbiAgICAgICAgd2F0Y2g6ICgpIC0+XG4gICAgICAgICAgICB0b1dhdGNoID0gW107XG4gICAgICAgICAgICBmb3IgdGlsZSBpbiAkc2NvcGUudGlsZXNcbiAgICAgICAgICAgICAgICBmb3Igd2F0Y2hlZEF0dHIgaW4gdGhpcy53YXRjaGVkQXR0cnNcbiAgICAgICAgICAgICAgICAgICAgdG9XYXRjaC5wdXNoIHRpbGUubW9kZWxbd2F0Y2hlZEF0dHJdXG4gICAgICAgICAgICByZXR1cm4gdG9XYXRjaFxuXG4gICAgICAgIG9uQ2hhbmdlOiAoKSAtPlxuICAgICAgICAgICAgJHNjb3BlLmluZm8udXBkYXRlKCRzY29wZS50aWxlcylcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUudGlsZXNcbiAgICB9XG5cbiAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbiB0aWxlcy53YXRjaC5iaW5kKHRpbGVzKSwgdGlsZXMub25DaGFuZ2VcblxuICAgICRzY29wZS4kb24gJ1RpbGU6Q2xlYXInLCAoJGV2LCB0aWxlKSAtPlxuICAgICAgICAkc2NvcGUudGlsZXMuY2xlYXJOZWlnaGJvcnMgdGlsZVxuXG4gICAgd2luZG93LmxvZ1Njb3BlID0gKCkgLT5cbiAgICAgICAgd2luZG93LiRzY29wZSA9ICRzY29wZSIsbnVsbF0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9