angular.module("CtrlBoard",["ngSlider","CollectTiles","ModelSliders","ModelModals","ModelBoardInfo","angularLocalStorage"]).controller("CtrlBoard",function($scope,storage,CollectTiles,ModelSliders,ModelModals,ModelBoardInfo){var noMineFirstClick,save,savedGame;return noMineFirstClick=function(tile){return 0===$scope.info.numOfClears&&tile.model.isMine===!0&&(tile.model.isMine=!1,$scope.tiles.randomSafeTile().model.isMine=!0,$scope.tiles.tallyMines()),tile},save=function(){return storage.set("tiles",$scope.tiles.all)},$scope.modals=ModelModals.set("Resources/templates/modals/",["instructions","newGame"]),$scope.sliders=ModelSliders.init(5,20,10),savedGame=storage.get("tiles"),$scope.tiles=savedGame?new CollectTiles(savedGame):new CollectTiles($scope.sliders.info.x.val,$scope.sliders.info.y.val,$scope.sliders.info.mines.val),save(),$scope.info=ModelBoardInfo,$scope.info.update($scope.tiles.all),$scope.ui={newGame:function(sizeX,sizeY,numOfMines){return $scope.tiles=new CollectTiles(sizeX,sizeY,numOfMines),$scope.info.update($scope.tiles.all),$scope.modals.reset()},tileClick:function(event,tile){var flagKeyWasPressed;return flagKeyWasPressed=event.shiftKey===!0||event.altKey===!0,flagKeyWasPressed?tile.toggleFlag():(noMineFirstClick(tile),tile.clear())}},$scope.$on("Tile:Clear",function($ev,tile){return $scope.info.update($scope.tiles.all),save()}),$scope.$on("Tile:Flag",function($ev,tile){return $scope.info.update($scope.tiles.all),save()}),window.logScope=function(){return window.$scope=$scope}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2JvYXJkLmNvZmZlZSIsImNvbnRyb2xsZXJzL2JvYXJkLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwic3RvcmFnZSIsIkNvbGxlY3RUaWxlcyIsIk1vZGVsU2xpZGVycyIsIk1vZGVsTW9kYWxzIiwiTW9kZWxCb2FyZEluZm8iLCJub01pbmVGaXJzdENsaWNrIiwic2F2ZSIsInNhdmVkR2FtZSIsInRpbGUiLCJpbmZvIiwibnVtT2ZDbGVhcnMiLCJtb2RlbCIsImlzTWluZSIsInRpbGVzIiwicmFuZG9tU2FmZVRpbGUiLCJ0YWxseU1pbmVzIiwic2V0IiwiYWxsIiwibW9kYWxzIiwic2xpZGVycyIsImluaXQiLCJnZXQiLCJ4IiwidmFsIiwieSIsIm1pbmVzIiwidXBkYXRlIiwidWkiLCJuZXdHYW1lIiwic2l6ZVgiLCJzaXplWSIsIm51bU9mTWluZXMiLCJyZXNldCIsInRpbGVDbGljayIsImV2ZW50IiwiZmxhZ0tleVdhc1ByZXNzZWQiLCJzaGlmdEtleSIsImFsdEtleSIsInRvZ2dsZUZsYWciLCJjbGVhciIsIiRvbiIsIiRldiIsIndpbmRvdyIsImxvZ1Njb3BlIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFDQ0MsT0FBTyxhQUVKLFdBQ0EsZUFDQSxlQUNBLGNBQ0EsaUJBQ0Esd0JBRUhDLFdBQVcsWUFBYSxTQUNyQkMsT0FDQUMsUUFDQUMsYUFDQUMsYUFDQUMsWUFDQUMsZ0JBRUEsR0FBQUMsa0JBQUFDLEtBQUFDLFNDK0JGLE9EL0JFRixrQkFBbUIsU0FBQ0csTUFNaEIsTUFMOEIsS0FBM0JULE9BQU9VLEtBQUtDLGFBQXFCRixLQUFLRyxNQUFNQyxVQUFVLElBQ3JESixLQUFLRyxNQUFNQyxRQUFTLEVBQ3BCYixPQUFPYyxNQUFNQyxpQkFBaUJILE1BQU1DLFFBQVMsRUFDN0NiLE9BQU9jLE1BQU1FLGNBRVZQLE1BRVhGLEtBQU8sV0NmUCxNRGdCSU4sU0FBUWdCLElBQUksUUFBU2pCLE9BQU9jLE1BQU1JLE1BRXRDbEIsT0FBT21CLE9BQVNmLFlBQVlhLElBQ3hCLCtCQUVJLGVBQ0EsWUFJUmpCLE9BQU9vQixRQUFVakIsYUFBYWtCLEtBQUssRUFBRyxHQUFJLElBRzFDYixVQUFZUCxRQUFRcUIsSUFBSSxTQUdwQnRCLE9BQU9jLE1BRFJOLFVBQ29CLEdBQUFOLGNBQWFNLFdBRWIsR0FBQU4sY0FDZkYsT0FBT29CLFFBQVFWLEtBQUthLEVBQUVDLElBQ3RCeEIsT0FBT29CLFFBQVFWLEtBQUtlLEVBQUVELElBQ3RCeEIsT0FBT29CLFFBQVFWLEtBQUtnQixNQUFNRixLQUdsQ2pCLE9BRUFQLE9BQU9VLEtBQU9MLGVBQ2RMLE9BQU9VLEtBQUtpQixPQUFPM0IsT0FBT2MsTUFBTUksS0FFaENsQixPQUFPNEIsSUFDSEMsUUFBUyxTQUFDQyxNQUFPQyxNQUFPQyxZQzdCMUIsTUQ4Qk1oQyxRQUFPYyxNQUFZLEdBQUFaLGNBQWE0QixNQUFPQyxNQUFPQyxZQUM5Q2hDLE9BQU9VLEtBQUtpQixPQUFPM0IsT0FBT2MsTUFBTUksS0FDaENsQixPQUFPbUIsT0FBT2MsU0FFbEJDLFVBQVcsU0FBQ0MsTUFBTzFCLE1BQ2YsR0FBQTJCLGtCQUtBLE9BTEFBLG1CQUNJRCxNQUFNRSxZQUFZLEdBQ2xCRixNQUFNRyxVQUFVLEVBR2pCRixrQkFDQzNCLEtBQUs4QixjQUVMakMsaUJBQWlCRyxNQUNqQkEsS0FBSytCLFdBR2pCeEMsT0FBT3lDLElBQUksYUFBYyxTQUFDQyxJQUFLakMsTUNoQy9CLE1EaUNJVCxRQUFPVSxLQUFLaUIsT0FBTzNCLE9BQU9jLE1BQU1JLEtBQ2hDWCxTQUdKUCxPQUFPeUMsSUFBSSxZQUFhLFNBQUNDLElBQUtqQyxNQ2pDOUIsTURrQ0lULFFBQU9VLEtBQUtpQixPQUFPM0IsT0FBT2MsTUFBTUksS0FDaENYLFNBRUpvQyxPQUFPQyxTQUFXLFdDbENsQixNRG1DSUQsUUFBTzNDLE9BQVNBIiwiZmlsZSI6ImNvbnRyb2xsZXJzL2JvYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhclxuLm1vZHVsZSAnQ3RybEJvYXJkJywgW1xuIyBEZXBlbmRlbmNpZXNcbiAgICAnbmdTbGlkZXInXG4gICAgJ0NvbGxlY3RUaWxlcydcbiAgICAnTW9kZWxTbGlkZXJzJ1xuICAgICdNb2RlbE1vZGFscydcbiAgICAnTW9kZWxCb2FyZEluZm8nXG4gICAgJ2FuZ3VsYXJMb2NhbFN0b3JhZ2UnXG5dXG4uY29udHJvbGxlciAnQ3RybEJvYXJkJywgKFxuICAgICRzY29wZSxcbiAgICBzdG9yYWdlLFxuICAgIENvbGxlY3RUaWxlcyxcbiAgICBNb2RlbFNsaWRlcnMsXG4gICAgTW9kZWxNb2RhbHMsXG4gICAgTW9kZWxCb2FyZEluZm9cbikgLT5cbiAgICBub01pbmVGaXJzdENsaWNrID0gKHRpbGUpIC0+XG4gICAgICAgIGlmICRzY29wZS5pbmZvLm51bU9mQ2xlYXJzIGlzIDAgYW5kIHRpbGUubW9kZWwuaXNNaW5lIGlzIHRydWVcbiAgICAgICAgICAgIHRpbGUubW9kZWwuaXNNaW5lID0gZmFsc2VcbiAgICAgICAgICAgICRzY29wZS50aWxlcy5yYW5kb21TYWZlVGlsZSgpLm1vZGVsLmlzTWluZSA9IHRydWVcbiAgICAgICAgICAgICRzY29wZS50aWxlcy50YWxseU1pbmVzKClcblxuICAgICAgICByZXR1cm4gdGlsZVxuXG4gICAgc2F2ZSA9IC0+XG4gICAgICAgIHN0b3JhZ2Uuc2V0ICd0aWxlcycsICRzY29wZS50aWxlcy5hbGxcblxuICAgICRzY29wZS5tb2RhbHMgPSBNb2RlbE1vZGFscy5zZXQoXG4gICAgICAgICdSZXNvdXJjZXMvdGVtcGxhdGVzL21vZGFscy8nLFxuICAgICAgICBbXG4gICAgICAgICAgICAnaW5zdHJ1Y3Rpb25zJyxcbiAgICAgICAgICAgICduZXdHYW1lJ1xuICAgICAgICBdXG4gICAgKVxuXG4gICAgJHNjb3BlLnNsaWRlcnMgPSBNb2RlbFNsaWRlcnMuaW5pdCA1LCAyMCwgMTBcblxuICAgICMgTG9hZCBvciBDcmVhdGUgZ2FtZVxuICAgIHNhdmVkR2FtZSA9IHN0b3JhZ2UuZ2V0ICd0aWxlcydcblxuICAgIGlmIHNhdmVkR2FtZVxuICAgICAgICAkc2NvcGUudGlsZXMgPSBuZXcgQ29sbGVjdFRpbGVzIHNhdmVkR2FtZVxuICAgIGVsc2VcbiAgICAgICAgJHNjb3BlLnRpbGVzID0gbmV3IENvbGxlY3RUaWxlcyhcbiAgICAgICAgICAgICRzY29wZS5zbGlkZXJzLmluZm8ueC52YWwsXG4gICAgICAgICAgICAkc2NvcGUuc2xpZGVycy5pbmZvLnkudmFsLFxuICAgICAgICAgICAgJHNjb3BlLnNsaWRlcnMuaW5mby5taW5lcy52YWxcbiAgICAgICAgKVxuXG4gICAgc2F2ZSgpXG5cbiAgICAkc2NvcGUuaW5mbyA9IE1vZGVsQm9hcmRJbmZvXG4gICAgJHNjb3BlLmluZm8udXBkYXRlICRzY29wZS50aWxlcy5hbGxcblxuICAgICRzY29wZS51aSA9IHtcbiAgICAgICAgbmV3R2FtZTogKHNpemVYLCBzaXplWSwgbnVtT2ZNaW5lcykgLT5cbiAgICAgICAgICAgICRzY29wZS50aWxlcyA9IG5ldyBDb2xsZWN0VGlsZXMgc2l6ZVgsIHNpemVZLCBudW1PZk1pbmVzXG4gICAgICAgICAgICAkc2NvcGUuaW5mby51cGRhdGUgJHNjb3BlLnRpbGVzLmFsbFxuICAgICAgICAgICAgJHNjb3BlLm1vZGFscy5yZXNldCgpXG5cbiAgICAgICAgdGlsZUNsaWNrOiAoZXZlbnQsIHRpbGUpIC0+XG4gICAgICAgICAgICBmbGFnS2V5V2FzUHJlc3NlZCA9IChcbiAgICAgICAgICAgICAgICBldmVudC5zaGlmdEtleSBpcyB0cnVlIG9yXG4gICAgICAgICAgICAgICAgZXZlbnQuYWx0S2V5IGlzIHRydWVcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgaWYgZmxhZ0tleVdhc1ByZXNzZWRcbiAgICAgICAgICAgICAgICB0aWxlLnRvZ2dsZUZsYWcoKVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG5vTWluZUZpcnN0Q2xpY2sodGlsZSlcbiAgICAgICAgICAgICAgICB0aWxlLmNsZWFyKClcbiAgICB9XG5cbiAgICAkc2NvcGUuJG9uICdUaWxlOkNsZWFyJywgKCRldiwgdGlsZSkgLT5cbiAgICAgICAgJHNjb3BlLmluZm8udXBkYXRlICRzY29wZS50aWxlcy5hbGxcbiAgICAgICAgc2F2ZSgpXG5cblxuICAgICRzY29wZS4kb24gJ1RpbGU6RmxhZycsICgkZXYsIHRpbGUpIC0+XG4gICAgICAgICRzY29wZS5pbmZvLnVwZGF0ZSAkc2NvcGUudGlsZXMuYWxsXG4gICAgICAgIHNhdmUoKVxuXG4gICAgd2luZG93LmxvZ1Njb3BlID0gKCkgLT5cbiAgICAgICAgd2luZG93LiRzY29wZSA9ICRzY29wZSIsbnVsbF0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9