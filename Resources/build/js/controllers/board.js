angular.module("CtrlBoard",["ngSlider","CollectTiles","ModelSliders","ModelModals","ModelBoardInfo"]).controller("CtrlBoard",function($scope,storage,CollectTiles,ModelSliders,ModelModals,ModelBoardInfo){var currentBoard,init,noMineFirstClick,tiles;return noMineFirstClick=function(tile){return 0===$scope.info.numOfClears&&tile.model.isMine===!0&&(tile.model.isMine=!1,currentBoard.randomSafeTile().model.isMine=!0,currentBoard.tallyMines()),tile},init=function(boardInstance,info){var board;return board=void 0,board=null===storage.get("tiles")?boardInstance.newGame(info.x.val,info.y.val,info.mines.val):boardInstance.loadGame(storage.get("tiles")),storage.bind($scope,"tiles"),board},$scope.modals=ModelModals.set("Resources/templates/modals/",["instructions","newGame"]),$scope.sliders=ModelSliders.init(5,20,10),currentBoard=init(CollectTiles,$scope.sliders.info),$scope.tiles=currentBoard.tiles,$scope.info=ModelBoardInfo,$scope.ui={autoSelect:function(num){return $scope.tiles=currentBoard.autoSelect(num)},newGame:function(sizeX,sizeY,numOfMines){return currentBoard=CollectTiles.newGame(sizeX,sizeY,numOfMines),$scope.tiles=currentBoard.tiles,$scope.modals.reset(),currentBoard},tileClick:function(event,tile){return event.shiftKey===!0||event.altKey===!0?tile.toggleFlag():(noMineFirstClick(tile),tile.clear()),tile}},tiles={watchedAttrs:["isClear","isFlagged"],watch:function(){var tile,toWatch,watchedAttr,_i,_j,_len,_len1,_ref,_ref1;for(toWatch=[],_ref=$scope.tiles,_i=0,_len=_ref.length;_len>_i;_i++)for(tile=_ref[_i],_ref1=this.watchedAttrs,_j=0,_len1=_ref1.length;_len1>_j;_j++)watchedAttr=_ref1[_j],toWatch.push(tile.model[watchedAttr]);return toWatch},onChange:function(){return $scope.info.update($scope.tiles),$scope.tiles}},$scope.$watchCollection(tiles.watch.bind(tiles),tiles.onChange)});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyb2xsZXJzL2JvYXJkLmNvZmZlZSIsImNvbnRyb2xsZXJzL2JvYXJkLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwic3RvcmFnZSIsIkNvbGxlY3RUaWxlcyIsIk1vZGVsU2xpZGVycyIsIk1vZGVsTW9kYWxzIiwiTW9kZWxCb2FyZEluZm8iLCJjdXJyZW50Qm9hcmQiLCJpbml0Iiwibm9NaW5lRmlyc3RDbGljayIsInRpbGVzIiwidGlsZSIsImluZm8iLCJudW1PZkNsZWFycyIsIm1vZGVsIiwiaXNNaW5lIiwicmFuZG9tU2FmZVRpbGUiLCJ0YWxseU1pbmVzIiwiYm9hcmRJbnN0YW5jZSIsImJvYXJkIiwiZ2V0IiwibmV3R2FtZSIsIngiLCJ2YWwiLCJ5IiwibWluZXMiLCJsb2FkR2FtZSIsImJpbmQiLCJtb2RhbHMiLCJzZXQiLCJzbGlkZXJzIiwidWkiLCJhdXRvU2VsZWN0IiwibnVtIiwic2l6ZVgiLCJzaXplWSIsIm51bU9mTWluZXMiLCJyZXNldCIsInRpbGVDbGljayIsImV2ZW50Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJ0b2dnbGVGbGFnIiwiY2xlYXIiLCJ3YXRjaGVkQXR0cnMiLCJ3YXRjaCIsInRvV2F0Y2giLCJ3YXRjaGVkQXR0ciIsIl9pIiwiX2oiLCJfbGVuIiwiX2xlbjEiLCJfcmVmIiwiX3JlZjEiLCJsZW5ndGgiLCJ0aGlzIiwicHVzaCIsIm9uQ2hhbmdlIiwidXBkYXRlIiwiJHdhdGNoQ29sbGVjdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQ0NDLE9BQU8sYUFHSixXQUNBLGVBQ0EsZUFDQSxjQUNBLG1CQUdIQyxXQUFXLFlBQ1osU0FBQ0MsT0FBUUMsUUFBU0MsYUFBY0MsYUFBY0MsWUFBYUMsZ0JBQ3ZELEdBQUFDLGNBQUFDLEtBQUFDLGlCQUFBQyxLQ3NERixPRHRERUQsa0JBQW1CLFNBQUNFLE1BTWhCLE1BTDhCLEtBQTNCVixPQUFPVyxLQUFLQyxhQUFxQkYsS0FBS0csTUFBTUMsVUFBVSxJQUNyREosS0FBS0csTUFBTUMsUUFBUyxFQUNwQlIsYUFBYVMsaUJBQWlCRixNQUFNQyxRQUFTLEVBQzdDUixhQUFhVSxjQUVWTixNQUVYSCxLQUFPLFNBQUNVLGNBQWVOLE1BQ25CLEdBQUFPLE1BUUEsT0FSQUEsT0FBUyxPQUVMQSxNQUR1QixPQUF4QmpCLFFBQVFrQixJQUFJLFNBQ0hGLGNBQWNHLFFBQVFULEtBQUtVLEVBQUVDLElBQUtYLEtBQUtZLEVBQUVELElBQUtYLEtBQUthLE1BQU1GLEtBRXpETCxjQUFjUSxTQUFTeEIsUUFBUWtCLElBQUksVUFFL0NsQixRQUFReUIsS0FBSzFCLE9BQVEsU0FFZGtCLE9BRVhsQixPQUFPMkIsT0FBU3ZCLFlBQVl3QixJQUN4QiwrQkFFSSxlQUNBLFlBSVI1QixPQUFPNkIsUUFBVTFCLGFBQWFJLEtBQUssRUFBRyxHQUFJLElBRTFDRCxhQUFlQyxLQUFLTCxhQUFjRixPQUFPNkIsUUFBUWxCLE1BRWpEWCxPQUFPUyxNQUFRSCxhQUFhRyxNQUM1QlQsT0FBT1csS0FBT04sZUFFZEwsT0FBTzhCLElBQ0hDLFdBQVksU0FBQ0MsS0NwQmYsTURxQk1oQyxRQUFPUyxNQUFRSCxhQUFheUIsV0FBV0MsTUFFM0NaLFFBQVMsU0FBQ2EsTUFBT0MsTUFBT0MsWUFPcEIsTUFOQTdCLGNBQWVKLGFBQWFrQixRQUFRYSxNQUFPQyxNQUFPQyxZQUVsRG5DLE9BQU9TLE1BQVFILGFBQWFHLE1BRTVCVCxPQUFPMkIsT0FBT1MsUUFFUDlCLGNBRVgrQixVQUFXLFNBQUNDLE1BQU81QixNQU9mLE1BTkc0QixPQUFNQyxZQUFZLEdBQVFELE1BQU1FLFVBQVUsRUFDekM5QixLQUFLK0IsY0FFTGpDLGlCQUFpQkUsTUFDakJBLEtBQUtnQyxTQUVGaEMsT0FLZkQsT0FDSWtDLGNBQ0ksVUFDQSxhQUdKQyxNQUFPLFdBQ0gsR0FBQWxDLE1BQUFtQyxRQUFBQyxZQUFBQyxHQUFBQyxHQUFBQyxLQUFBQyxNQUFBQyxLQUFBQyxLQUNBLEtBREFQLFdBQ0FNLEtBQUFuRCxPQUFBUyxNQUFBc0MsR0FBQSxFQUFBRSxLQUFBRSxLQUFBRSxPQUFBSixLQUFBRixHQUFBQSxLQUNJLElDNUJSckMsS0FBT3lDLEtBQUtKLElENEJKSyxNQUFBRSxLQUFBWCxhQUFBSyxHQUFBLEVBQUFFLE1BQUFFLE1BQUFDLE9BQUFILE1BQUFGLEdBQUFBLEtDekJORixZQUFjTSxNQUFNSixJRDBCVkgsUUFBUVUsS0FBSzdDLEtBQUtHLE1BQU1pQyxhQUNoQyxPQUFPRCxVQUVYVyxTQUFVLFdBRU4sTUFEQXhELFFBQU9XLEtBQUs4QyxPQUFPekQsT0FBT1MsT0FDbkJULE9BQU9TLFFBR3RCVCxPQUFPMEQsaUJBQWlCakQsTUFBTW1DLE1BQU1sQixLQUFLakIsT0FBUUEsTUFBTStDIiwiZmlsZSI6ImNvbnRyb2xsZXJzL2JvYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhclxuLm1vZHVsZSAnQ3RybEJvYXJkJyxcbiMgRGVwZW5kZW5jaWVzXG5bXG4gICAgJ25nU2xpZGVyJyxcbiAgICAnQ29sbGVjdFRpbGVzJyxcbiAgICAnTW9kZWxTbGlkZXJzJyxcbiAgICAnTW9kZWxNb2RhbHMnLFxuICAgICdNb2RlbEJvYXJkSW5mbydcbl1cblxuLmNvbnRyb2xsZXIgJ0N0cmxCb2FyZCcsIFxuKCRzY29wZSwgc3RvcmFnZSwgQ29sbGVjdFRpbGVzLCBNb2RlbFNsaWRlcnMsIE1vZGVsTW9kYWxzLCBNb2RlbEJvYXJkSW5mbykgLT5cbiAgICBub01pbmVGaXJzdENsaWNrID0gKHRpbGUpIC0+XG4gICAgICAgIGlmICRzY29wZS5pbmZvLm51bU9mQ2xlYXJzIGlzIDAgYW5kIHRpbGUubW9kZWwuaXNNaW5lIGlzIHRydWVcbiAgICAgICAgICAgIHRpbGUubW9kZWwuaXNNaW5lID0gZmFsc2VcbiAgICAgICAgICAgIGN1cnJlbnRCb2FyZC5yYW5kb21TYWZlVGlsZSgpLm1vZGVsLmlzTWluZSA9IHRydWVcbiAgICAgICAgICAgIGN1cnJlbnRCb2FyZC50YWxseU1pbmVzKClcblxuICAgICAgICByZXR1cm4gdGlsZVxuXG4gICAgaW5pdCA9IChib2FyZEluc3RhbmNlLCBpbmZvKSAtPlxuICAgICAgICBib2FyZCAgPSB1bmRlZmluZWRcbiAgICAgICAgaWYgc3RvcmFnZS5nZXQoJ3RpbGVzJykgPT0gbnVsbFxuICAgICAgICAgICAgYm9hcmQgPSBib2FyZEluc3RhbmNlLm5ld0dhbWUgaW5mby54LnZhbCwgaW5mby55LnZhbCwgaW5mby5taW5lcy52YWxcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYm9hcmQgPSBib2FyZEluc3RhbmNlLmxvYWRHYW1lIHN0b3JhZ2UuZ2V0KCd0aWxlcycpXG5cbiAgICAgICAgc3RvcmFnZS5iaW5kICRzY29wZSwgJ3RpbGVzJ1xuXG4gICAgICAgIHJldHVybiBib2FyZFxuXG4gICAgJHNjb3BlLm1vZGFscyA9IE1vZGVsTW9kYWxzLnNldChcbiAgICAgICAgJ1Jlc291cmNlcy90ZW1wbGF0ZXMvbW9kYWxzLycsIFxuICAgICAgICBbXG4gICAgICAgICAgICAnaW5zdHJ1Y3Rpb25zJyxcbiAgICAgICAgICAgICduZXdHYW1lJ1xuICAgICAgICBdXG4gICAgKVxuXG4gICAgJHNjb3BlLnNsaWRlcnMgPSBNb2RlbFNsaWRlcnMuaW5pdCA1LCAyMCwgMTBcblxuICAgIGN1cnJlbnRCb2FyZCA9IGluaXQgQ29sbGVjdFRpbGVzLCAkc2NvcGUuc2xpZGVycy5pbmZvXG5cbiAgICAkc2NvcGUudGlsZXMgPSBjdXJyZW50Qm9hcmQudGlsZXNcbiAgICAkc2NvcGUuaW5mbyA9IE1vZGVsQm9hcmRJbmZvXG5cbiAgICAkc2NvcGUudWkgPSB7XG4gICAgICAgIGF1dG9TZWxlY3Q6IChudW0pIC0+XG4gICAgICAgICAgICAkc2NvcGUudGlsZXMgPSBjdXJyZW50Qm9hcmQuYXV0b1NlbGVjdCBudW0gXG5cbiAgICAgICAgbmV3R2FtZTogKHNpemVYLCBzaXplWSwgbnVtT2ZNaW5lcykgLT4gXG4gICAgICAgICAgICBjdXJyZW50Qm9hcmQgPSBDb2xsZWN0VGlsZXMubmV3R2FtZSBzaXplWCwgc2l6ZVksIG51bU9mTWluZXNcblxuICAgICAgICAgICAgJHNjb3BlLnRpbGVzID0gY3VycmVudEJvYXJkLnRpbGVzXG5cbiAgICAgICAgICAgICRzY29wZS5tb2RhbHMucmVzZXQoKVxuXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEJvYXJkXG5cbiAgICAgICAgdGlsZUNsaWNrOiAoZXZlbnQsIHRpbGUpIC0+XG4gICAgICAgICAgICBpZiBldmVudC5zaGlmdEtleSBpcyB0cnVlIG9yIGV2ZW50LmFsdEtleSBpcyB0cnVlXG4gICAgICAgICAgICAgICAgdGlsZS50b2dnbGVGbGFnKClcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBub01pbmVGaXJzdENsaWNrKHRpbGUpXG4gICAgICAgICAgICAgICAgdGlsZS5jbGVhcigpXG5cbiAgICAgICAgICAgIHJldHVybiB0aWxlXG4gICAgfVxuXG5cbiAgICAjIFVwZGF0ZSBnYW1lIGluZm8gd2hlbiBjaGFuZ2UgdG8gcHJvcGVydGllcyBsaXN0ZWQgYmVsb3cgY2hhbmdlIGZvciBhbnkgdGlsZVxuICAgIHRpbGVzID0ge1xuICAgICAgICB3YXRjaGVkQXR0cnM6IFtcbiAgICAgICAgICAgICdpc0NsZWFyJyxcbiAgICAgICAgICAgICdpc0ZsYWdnZWQnXG4gICAgICAgIF1cblxuICAgICAgICB3YXRjaDogKCkgLT5cbiAgICAgICAgICAgIHRvV2F0Y2ggPSBbXTtcbiAgICAgICAgICAgIGZvciB0aWxlIGluICRzY29wZS50aWxlc1xuICAgICAgICAgICAgICAgIGZvciB3YXRjaGVkQXR0ciBpbiB0aGlzLndhdGNoZWRBdHRyc1xuICAgICAgICAgICAgICAgICAgICB0b1dhdGNoLnB1c2ggdGlsZS5tb2RlbFt3YXRjaGVkQXR0cl1cbiAgICAgICAgICAgIHJldHVybiB0b1dhdGNoXG5cbiAgICAgICAgb25DaGFuZ2U6ICgpIC0+XG4gICAgICAgICAgICAkc2NvcGUuaW5mby51cGRhdGUoJHNjb3BlLnRpbGVzKVxuICAgICAgICAgICAgcmV0dXJuICRzY29wZS50aWxlcyAgICAgICAgICAgIFxuICAgIH1cblxuICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uIHRpbGVzLndhdGNoLmJpbmQodGlsZXMpLCB0aWxlcy5vbkNoYW5nZVxuIixudWxsXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=