angular.module("tile",[]).directive("tile",function($parse,$rootScope){return{template:["<li>","<span>{{text}}</span>","</li>"].join(""),restrict:"A",replace:!0,$scope:{tile:"=tile",ngClass:"=ngClass"},link:function($scope,$el,attrs){var isClear,onClick,tileAdjacentMines,tileIsFlagged,tileIsMine,update,updateClasses,updateText;return isClear=$scope.tile.model.isClear===!0,tileIsFlagged=function(){return $scope.tile.model.isClear!==!0&&$scope.tile.model.isFlagged===!0},tileIsMine=function(){return $scope.tile.model.isClear===!0&&$scope.tile.model.isMine===!0},tileAdjacentMines=function(){return $scope.tile.model.isClear===!0&&$scope.tile.model.isMine===!1},updateText=function(){return tileIsFlagged()?$scope.text="?":tileIsMine()?$scope.text="X":tileAdjacentMines()?$scope.text=String($scope.tile.model.adjacentMines):void 0},0===$scope.tile.model.x&&$el.addClass("nth"),updateClasses=function(){var elClass,elClasses,shouldAttach,_results;elClasses={flagged:tileIsFlagged(),clear:$scope.tile.model.isClear===!0,mine:tileIsMine(),zero:0===$scope.tile.model.adjacentMines&&$scope.tile.model.isClear===!0},_results=[];for(elClass in elClasses)shouldAttach=elClasses[elClass],_results.push(shouldAttach?$el.addClass(elClass):$el.removeClass(elClass));return _results},update=function(){return updateText(),updateClasses()},update(),onClick=function($event){return $scope.tile.click($event),update()},$el.bind("click",function($event){return $scope.tile.click($event),$scope.$$phase?void 0:$scope.$apply()}),$rootScope.$on("Tiles:Updated",function(){return update()})}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvdGlsZS5jb2ZmZWUiLCJkaXJlY3RpdmVzL3RpbGUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImRpcmVjdGl2ZSIsIiRwYXJzZSIsIiRyb290U2NvcGUiLCJ0ZW1wbGF0ZSIsImpvaW4iLCJyZXN0cmljdCIsInJlcGxhY2UiLCIkc2NvcGUiLCJ0aWxlIiwibmdDbGFzcyIsImxpbmsiLCIkZWwiLCJhdHRycyIsImlzQ2xlYXIiLCJvbkNsaWNrIiwidGlsZUFkamFjZW50TWluZXMiLCJ0aWxlSXNGbGFnZ2VkIiwidGlsZUlzTWluZSIsInVwZGF0ZSIsInVwZGF0ZUNsYXNzZXMiLCJ1cGRhdGVUZXh0IiwibW9kZWwiLCJpc0ZsYWdnZWQiLCJpc01pbmUiLCJ0ZXh0IiwiU3RyaW5nIiwiYWRqYWNlbnRNaW5lcyIsIngiLCJhZGRDbGFzcyIsImVsQ2xhc3MiLCJlbENsYXNzZXMiLCJzaG91bGRBdHRhY2giLCJfcmVzdWx0cyIsImZsYWdnZWQiLCJjbGVhciIsIm1pbmUiLCJ6ZXJvIiwicHVzaCIsInJlbW92ZUNsYXNzIiwiJGV2ZW50IiwiY2xpY2siLCJiaW5kIiwiJCRwaGFzZSIsIiRhcHBseSIsIiRvbiJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQ0NDLE9BQU8sV0FFUEMsVUFBVSxPQUFRLFNBQ2ZDLE9BQ0FDLFlBRUEsT0FDSUMsVUFDSSxPQUNJLHdCQUNKLFNBQ0ZDLEtBQUssSUFDUEMsU0FBVSxJQUNWQyxTQUFTLEVBQ1RDLFFBQ0lDLEtBQU0sUUFDTkMsUUFBUyxZQUNiQyxLQUFNLFNBQUNILE9BQVFJLElBQUtDLE9BQ2hCLEdBQUFDLFNBQUFDLFFBQUFDLGtCQUFBQyxjQUFBQyxXQUFBQyxPQUFBQyxjQUFBQyxVQ2dETixPRGhETVAsU0FBVU4sT0FBT0MsS0FBS2EsTUFBTVIsV0FBVyxFQUV2Q0csY0FBZ0IsV0NScEIsTURTUVQsUUFBT0MsS0FBS2EsTUFBTVIsV0FBYSxHQUMvQk4sT0FBT0MsS0FBS2EsTUFBTUMsYUFBYSxHQUVuQ0wsV0FBYSxXQ1RqQixNRFVRVixRQUFPQyxLQUFLYSxNQUFNUixXQUFXLEdBQzdCTixPQUFPQyxLQUFLYSxNQUFNRSxVQUFVLEdBRWhDUixrQkFBb0IsV0NWeEIsTURXUVIsUUFBT0MsS0FBS2EsTUFBTVIsV0FBVyxHQUFTTixPQUFPQyxLQUFLYSxNQUFNRSxVQUFVLEdBR3RFSCxXQUFhLFdBQ1QsTUFBR0osaUJBQ0NULE9BQU9pQixLQUFPLElBQ1ZQLGFBQ0pWLE9BQU9pQixLQUFPLElBQ1ZULG9CQUNKUixPQUFPaUIsS0FBT0MsT0FBT2xCLE9BQU9DLEtBQUthLE1BQU1LLGVBRHRDLFFBR2lCLElBQXZCbkIsT0FBT0MsS0FBS2EsTUFBTU0sR0FDakJoQixJQUFJaUIsU0FBUyxPQUVqQlQsY0FBZ0IsV0FDWixHQUFBVSxTQUFBQyxVQUFBQyxhQUFBQyxRQUFBRixZQUNJRyxRQUFVakIsZ0JBQ1ZrQixNQUFVM0IsT0FBT0MsS0FBS2EsTUFBTVIsV0FBVyxFQUN2Q3NCLEtBQVVsQixhQUNWbUIsS0FBNkMsSUFBbkM3QixPQUFPQyxLQUFLYSxNQUFNSyxlQUF1Qm5CLE9BQU9DLEtBQUthLE1BQU1SLFdBQVcsR0FFcEZtQixXQ1RSLEtEU1FILFVBQUFDLFdDUk5DLGFBQWVELFVBQVVELFNBRXZCRyxTQUFTSyxLRE9FTixhQUNDcEIsSUFBSWlCLFNBQVNDLFNBRWJsQixJQUFJMkIsWUFBWVQsU0NMaEMsT0FBT0csV0RPSGQsT0FBUyxXQ0hiLE1ESVFFLGNBQ0FELGlCQUVKRCxTQUVBSixRQUFVLFNBQUN5QixRQ0pmLE1ES1FoQyxRQUFPQyxLQUFLZ0MsTUFBTUQsUUFDbEJyQixVQUVKUCxJQUFJOEIsS0FBSyxRQUFTLFNBQUNGLFFBRWYsTUFEQWhDLFFBQU9DLEtBQUtnQyxNQUFNRCxRQUNmaEMsT0FBUW1DLFFBQVgsT0FBd0JuQyxPQUFPb0MsV0FFbkN6QyxXQUFXMEMsSUFBSSxnQkFBaUIsV0NIcEMsTURJUTFCIiwiZmlsZSI6ImRpcmVjdGl2ZXMvdGlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXJcbi5tb2R1bGUgJ3RpbGUnLCBbXVxuXG4uZGlyZWN0aXZlICd0aWxlJywgKFxuICAgICRwYXJzZSxcbiAgICAkcm9vdFNjb3BlXG4pIC0+XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVtcGxhdGU6IFtcbiAgICAgICAgICAgICc8bGk+J1xuICAgICAgICAgICAgICAgICc8c3Bhbj57e3RleHR9fTwvc3Bhbj4nXG4gICAgICAgICAgICAnPC9saT4nXG4gICAgICAgIF0uam9pbignJylcbiAgICAgICAgcmVzdHJpY3Q6ICdBJ1xuICAgICAgICByZXBsYWNlOiB0cnVlXG4gICAgICAgICRzY29wZTpcbiAgICAgICAgICAgIHRpbGU6ICc9dGlsZSdcbiAgICAgICAgICAgIG5nQ2xhc3M6ICc9bmdDbGFzcydcbiAgICAgICAgbGluazogKCRzY29wZSwgJGVsLCBhdHRycykgLT5cbiAgICAgICAgICAgIGlzQ2xlYXIgPSAkc2NvcGUudGlsZS5tb2RlbC5pc0NsZWFyIGlzIHRydWVcblxuICAgICAgICAgICAgdGlsZUlzRmxhZ2dlZCA9IC0+XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRpbGUubW9kZWwuaXNDbGVhciBpc250IHRydWUgYW5kXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRpbGUubW9kZWwuaXNGbGFnZ2VkIGlzIHRydWVcblxuICAgICAgICAgICAgdGlsZUlzTWluZSA9IC0+XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRpbGUubW9kZWwuaXNDbGVhciBpcyB0cnVlIGFuZFxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzTWluZSBpcyB0cnVlXG5cbiAgICAgICAgICAgIHRpbGVBZGphY2VudE1pbmVzID0gLT5cbiAgICAgICAgICAgICAgICAkc2NvcGUudGlsZS5tb2RlbC5pc0NsZWFyID09IHRydWUgYW5kICRzY29wZS50aWxlLm1vZGVsLmlzTWluZSA9PSBmYWxzZVxuXG5cbiAgICAgICAgICAgIHVwZGF0ZVRleHQgPSAtPlxuICAgICAgICAgICAgICAgIGlmIHRpbGVJc0ZsYWdnZWQoKVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICc/J1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgdGlsZUlzTWluZSgpXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ1gnXG4gICAgICAgICAgICAgICAgZWxzZSBpZiB0aWxlQWRqYWNlbnRNaW5lcygpXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gU3RyaW5nICRzY29wZS50aWxlLm1vZGVsLmFkamFjZW50TWluZXNcblxuICAgICAgICAgICAgaWYgJHNjb3BlLnRpbGUubW9kZWwueCBpcyAwXG4gICAgICAgICAgICAgICAgJGVsLmFkZENsYXNzICdudGgnXG5cbiAgICAgICAgICAgIHVwZGF0ZUNsYXNzZXMgPSAtPlxuICAgICAgICAgICAgICAgIGVsQ2xhc3NlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgZmxhZ2dlZCA6IHRpbGVJc0ZsYWdnZWQoKVxuICAgICAgICAgICAgICAgICAgICBjbGVhciAgIDogJHNjb3BlLnRpbGUubW9kZWwuaXNDbGVhciBpcyB0cnVlXG4gICAgICAgICAgICAgICAgICAgIG1pbmUgICAgOiB0aWxlSXNNaW5lKClcbiAgICAgICAgICAgICAgICAgICAgemVybyAgICA6ICRzY29wZS50aWxlLm1vZGVsLmFkamFjZW50TWluZXMgaXMgMCBhbmQgJHNjb3BlLnRpbGUubW9kZWwuaXNDbGVhciBpcyB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciBlbENsYXNzLCBzaG91bGRBdHRhY2ggb2YgZWxDbGFzc2VzXG4gICAgICAgICAgICAgICAgICAgIGlmIHNob3VsZEF0dGFjaFxuICAgICAgICAgICAgICAgICAgICAgICAgJGVsLmFkZENsYXNzIGVsQ2xhc3NcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgJGVsLnJlbW92ZUNsYXNzIGVsQ2xhc3NcblxuICAgICAgICAgICAgdXBkYXRlID0gLT5cbiAgICAgICAgICAgICAgICB1cGRhdGVUZXh0KClcbiAgICAgICAgICAgICAgICB1cGRhdGVDbGFzc2VzKClcblxuICAgICAgICAgICAgdXBkYXRlKClcblxuICAgICAgICAgICAgb25DbGljayA9ICgkZXZlbnQpIC0+XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRpbGUuY2xpY2sgJGV2ZW50XG4gICAgICAgICAgICAgICAgdXBkYXRlKClcblxuICAgICAgICAgICAgJGVsLmJpbmQgJ2NsaWNrJywgKCRldmVudCkgLT5cbiAgICAgICAgICAgICAgICAkc2NvcGUudGlsZS5jbGljayAkZXZlbnRcbiAgICAgICAgICAgICAgICBpZiAhJHNjb3BlLiQkcGhhc2UgdGhlbiAkc2NvcGUuJGFwcGx5KClcblxuICAgICAgICAgICAgJHJvb3RTY29wZS4kb24gJ1RpbGVzOlVwZGF0ZWQnLCAtPlxuICAgICAgICAgICAgICAgIHVwZGF0ZSgpXG4gICAgfSIsbnVsbF0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9