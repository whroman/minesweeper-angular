angular.module("tile",[]).directive("tile",function($parse,$rootScope){return{templateUrl:"Resources/templates/tile.html",restrict:"A",replace:!0,$scope:{tile:"=tile",ngClass:"=ngClass"},link:function($scope,$el,attrs){var isClear,onClick,tileAdjacentMines,tileIsFlagged,tileIsMine,update,updateClasses,updateText;return isClear=$scope.tile.model.isClear===!0,tileIsFlagged=function(){return $scope.tile.model.isClear!==!0&&$scope.tile.model.isFlagged===!0},tileIsMine=function(){return $scope.tile.model.isClear===!0&&$scope.tile.model.isMine===!0},tileAdjacentMines=function(){return $scope.tile.model.isClear===!0&&$scope.tile.model.isMine===!1},updateText=function(){return tileIsFlagged()?$scope.text="?":tileIsMine()?$scope.text="X":tileAdjacentMines()?$scope.text=String($scope.tile.model.adjacentMines):void 0},0===$scope.tile.model.x&&$el.addClass("nth"),updateClasses=function(){var elClass,elClasses,shouldAttach,_results;elClasses={flagged:tileIsFlagged(),clear:$scope.tile.model.isClear===!0,mine:tileIsMine(),zero:0===$scope.tile.model.adjacentMines&&$scope.tile.model.isClear===!0},_results=[];for(elClass in elClasses)shouldAttach=elClasses[elClass],_results.push(shouldAttach?$el.addClass(elClass):$el.removeClass(elClass));return _results},update=function(){return updateText(),updateClasses()},update(),onClick=function($event){return $scope.tile.click($event),update()},$el.bind("click",function($event){return $scope.tile.click($event),$scope.$$phase?void 0:$scope.$apply()}),$rootScope.$on("Tiles:Updated",function(){return update()})}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvdGlsZS5jb2ZmZWUiLCJkaXJlY3RpdmVzL3RpbGUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImRpcmVjdGl2ZSIsIiRwYXJzZSIsIiRyb290U2NvcGUiLCJ0ZW1wbGF0ZVVybCIsInJlc3RyaWN0IiwicmVwbGFjZSIsIiRzY29wZSIsInRpbGUiLCJuZ0NsYXNzIiwibGluayIsIiRlbCIsImF0dHJzIiwiaXNDbGVhciIsIm9uQ2xpY2siLCJ0aWxlQWRqYWNlbnRNaW5lcyIsInRpbGVJc0ZsYWdnZWQiLCJ0aWxlSXNNaW5lIiwidXBkYXRlIiwidXBkYXRlQ2xhc3NlcyIsInVwZGF0ZVRleHQiLCJtb2RlbCIsImlzRmxhZ2dlZCIsImlzTWluZSIsInRleHQiLCJTdHJpbmciLCJhZGphY2VudE1pbmVzIiwieCIsImFkZENsYXNzIiwiZWxDbGFzcyIsImVsQ2xhc3NlcyIsInNob3VsZEF0dGFjaCIsIl9yZXN1bHRzIiwiZmxhZ2dlZCIsImNsZWFyIiwibWluZSIsInplcm8iLCJwdXNoIiwicmVtb3ZlQ2xhc3MiLCIkZXZlbnQiLCJjbGljayIsImJpbmQiLCIkJHBoYXNlIiwiJGFwcGx5IiwiJG9uIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFDQ0MsT0FBTyxXQUVQQyxVQUFVLE9BQVEsU0FDZkMsT0FDQUMsWUFFQSxPQUNJQyxZQUFhLGdDQUNiQyxTQUFVLElBQ1ZDLFNBQVMsRUFDVEMsUUFDSUMsS0FBTSxRQUNOQyxRQUFTLFlBQ2JDLEtBQU0sU0FBQ0gsT0FBUUksSUFBS0MsT0FDaEIsR0FBQUMsU0FBQUMsUUFBQUMsa0JBQUFDLGNBQUFDLFdBQUFDLE9BQUFDLGNBQUFDLFVDb0ROLE9EcERNUCxTQUFVTixPQUFPQyxLQUFLYSxNQUFNUixXQUFXLEVBRXZDRyxjQUFnQixXQ0pwQixNREtRVCxRQUFPQyxLQUFLYSxNQUFNUixXQUFhLEdBQy9CTixPQUFPQyxLQUFLYSxNQUFNQyxhQUFhLEdBRW5DTCxXQUFhLFdDTGpCLE1ETVFWLFFBQU9DLEtBQUthLE1BQU1SLFdBQVcsR0FDN0JOLE9BQU9DLEtBQUthLE1BQU1FLFVBQVUsR0FFaENSLGtCQUFvQixXQ054QixNRE9RUixRQUFPQyxLQUFLYSxNQUFNUixXQUFXLEdBQVNOLE9BQU9DLEtBQUthLE1BQU1FLFVBQVUsR0FHdEVILFdBQWEsV0FDVCxNQUFHSixpQkFDQ1QsT0FBT2lCLEtBQU8sSUFDVlAsYUFDSlYsT0FBT2lCLEtBQU8sSUFDVlQsb0JBQ0pSLE9BQU9pQixLQUFPQyxPQUFPbEIsT0FBT0MsS0FBS2EsTUFBTUssZUFEdEMsUUFHaUIsSUFBdkJuQixPQUFPQyxLQUFLYSxNQUFNTSxHQUNqQmhCLElBQUlpQixTQUFTLE9BRWpCVCxjQUFnQixXQUNaLEdBQUFVLFNBQUFDLFVBQUFDLGFBQUFDLFFBQUFGLFlBQ0lHLFFBQVVqQixnQkFDVmtCLE1BQVUzQixPQUFPQyxLQUFLYSxNQUFNUixXQUFXLEVBQ3ZDc0IsS0FBVWxCLGFBQ1ZtQixLQUE2QyxJQUFuQzdCLE9BQU9DLEtBQUthLE1BQU1LLGVBQXVCbkIsT0FBT0MsS0FBS2EsTUFBTVIsV0FBVyxHQUVwRm1CLFdDTFIsS0RLUUgsVUFBQUMsV0NKTkMsYUFBZUQsVUFBVUQsU0FFdkJHLFNBQVNLLEtER0VOLGFBQ0NwQixJQUFJaUIsU0FBU0MsU0FFYmxCLElBQUkyQixZQUFZVCxTQ0RoQyxPQUFPRyxXREdIZCxPQUFTLFdDQ2IsTURBUUUsY0FDQUQsaUJBRUpELFNBRUFKLFFBQVUsU0FBQ3lCLFFDQWYsTURDUWhDLFFBQU9DLEtBQUtnQyxNQUFNRCxRQUNsQnJCLFVBRUpQLElBQUk4QixLQUFLLFFBQVMsU0FBQ0YsUUFFZixNQURBaEMsUUFBT0MsS0FBS2dDLE1BQU1ELFFBQ2ZoQyxPQUFRbUMsUUFBWCxPQUF3Qm5DLE9BQU9vQyxXQUVuQ3hDLFdBQVd5QyxJQUFJLGdCQUFpQixXQ0NwQyxNREFRMUIiLCJmaWxlIjoiZGlyZWN0aXZlcy90aWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhclxuLm1vZHVsZSAndGlsZScsIFtdXG5cbi5kaXJlY3RpdmUgJ3RpbGUnLCAoXG4gICAgJHBhcnNlLFxuICAgICRyb290U2NvcGVcbikgLT5cbiAgICByZXR1cm4ge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJSZXNvdXJjZXMvdGVtcGxhdGVzL3RpbGUuaHRtbFwiXG4gICAgICAgIHJlc3RyaWN0OiAnQSdcbiAgICAgICAgcmVwbGFjZTogdHJ1ZVxuICAgICAgICAkc2NvcGU6XG4gICAgICAgICAgICB0aWxlOiAnPXRpbGUnXG4gICAgICAgICAgICBuZ0NsYXNzOiAnPW5nQ2xhc3MnXG4gICAgICAgIGxpbms6ICgkc2NvcGUsICRlbCwgYXR0cnMpIC0+XG4gICAgICAgICAgICBpc0NsZWFyID0gJHNjb3BlLnRpbGUubW9kZWwuaXNDbGVhciBpcyB0cnVlXG5cbiAgICAgICAgICAgIHRpbGVJc0ZsYWdnZWQgPSAtPlxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgaXNudCB0cnVlIGFuZFxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzRmxhZ2dlZCBpcyB0cnVlXG5cbiAgICAgICAgICAgIHRpbGVJc01pbmUgPSAtPlxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgaXMgdHJ1ZSBhbmRcbiAgICAgICAgICAgICAgICAkc2NvcGUudGlsZS5tb2RlbC5pc01pbmUgaXMgdHJ1ZVxuXG4gICAgICAgICAgICB0aWxlQWRqYWNlbnRNaW5lcyA9IC0+XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRpbGUubW9kZWwuaXNDbGVhciA9PSB0cnVlIGFuZCAkc2NvcGUudGlsZS5tb2RlbC5pc01pbmUgPT0gZmFsc2VcblxuXG4gICAgICAgICAgICB1cGRhdGVUZXh0ID0gLT5cbiAgICAgICAgICAgICAgICBpZiB0aWxlSXNGbGFnZ2VkKClcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnPydcbiAgICAgICAgICAgICAgICBlbHNlIGlmIHRpbGVJc01pbmUoKVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdYJ1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgdGlsZUFkamFjZW50TWluZXMoKVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9IFN0cmluZyAkc2NvcGUudGlsZS5tb2RlbC5hZGphY2VudE1pbmVzXG5cbiAgICAgICAgICAgIGlmICRzY29wZS50aWxlLm1vZGVsLnggaXMgMFxuICAgICAgICAgICAgICAgICRlbC5hZGRDbGFzcyAnbnRoJ1xuXG4gICAgICAgICAgICB1cGRhdGVDbGFzc2VzID0gLT5cbiAgICAgICAgICAgICAgICBlbENsYXNzZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGZsYWdnZWQgOiB0aWxlSXNGbGFnZ2VkKClcbiAgICAgICAgICAgICAgICAgICAgY2xlYXIgICA6ICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgaXMgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBtaW5lICAgIDogdGlsZUlzTWluZSgpXG4gICAgICAgICAgICAgICAgICAgIHplcm8gICAgOiAkc2NvcGUudGlsZS5tb2RlbC5hZGphY2VudE1pbmVzIGlzIDAgYW5kICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgaXMgdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgZWxDbGFzcywgc2hvdWxkQXR0YWNoIG9mIGVsQ2xhc3Nlc1xuICAgICAgICAgICAgICAgICAgICBpZiBzaG91bGRBdHRhY2hcbiAgICAgICAgICAgICAgICAgICAgICAgICRlbC5hZGRDbGFzcyBlbENsYXNzXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICRlbC5yZW1vdmVDbGFzcyBlbENsYXNzXG5cbiAgICAgICAgICAgIHVwZGF0ZSA9IC0+XG4gICAgICAgICAgICAgICAgdXBkYXRlVGV4dCgpXG4gICAgICAgICAgICAgICAgdXBkYXRlQ2xhc3NlcygpXG5cbiAgICAgICAgICAgIHVwZGF0ZSgpXG5cbiAgICAgICAgICAgIG9uQ2xpY2sgPSAoJGV2ZW50KSAtPlxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLmNsaWNrICRldmVudFxuICAgICAgICAgICAgICAgIHVwZGF0ZSgpXG5cbiAgICAgICAgICAgICRlbC5iaW5kICdjbGljaycsICgkZXZlbnQpIC0+XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRpbGUuY2xpY2sgJGV2ZW50XG4gICAgICAgICAgICAgICAgaWYgISRzY29wZS4kJHBoYXNlIHRoZW4gJHNjb3BlLiRhcHBseSgpXG5cbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uICdUaWxlczpVcGRhdGVkJywgLT5cbiAgICAgICAgICAgICAgICB1cGRhdGUoKVxuICAgIH0iLG51bGxdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==