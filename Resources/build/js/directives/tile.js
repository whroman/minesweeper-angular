angular.module("tile",[]).directive("tile",function($parse,$rootScope){return{templateUrl:"/Resources/templates/tile.html",restrict:"A",replace:!0,$scope:{tile:"=tile",ngClass:"=ngClass"},link:function($scope,$el,attrs){var isClear,onClick,tileAdjacentMines,tileIsFlagged,tileIsMine,update,updateClasses,updateText;return isClear=$scope.tile.model.isClear===!0,tileIsFlagged=function(){return $scope.tile.model.isClear!==!0&&$scope.tile.model.isFlagged===!0},tileIsMine=function(){return $scope.tile.model.isClear===!0&&$scope.tile.model.isMine===!0},tileAdjacentMines=function(){return $scope.tile.model.isClear===!0&&$scope.tile.model.isMine===!1},updateText=function(){return tileIsFlagged()?$scope.text="?":tileIsMine()?$scope.text="X":tileAdjacentMines()?$scope.text=String($scope.tile.model.adjacentMines):void 0},0===$scope.tile.model.x&&$el.addClass("nth"),updateClasses=function(){var elClass,elClasses,shouldAttach,_results;elClasses={flagged:tileIsFlagged(),clear:$scope.tile.model.isClear===!0,mine:tileIsMine(),zero:0===$scope.tile.model.adjacentMines&&$scope.tile.model.isClear===!0},_results=[];for(elClass in elClasses)shouldAttach=elClasses[elClass],_results.push(shouldAttach?$el.addClass(elClass):$el.removeClass(elClass));return _results},update=function(){return updateText(),updateClasses()},update(),onClick=function($event){return $scope.tile.click($event),update()},$el.bind("click",function($event){return $scope.tile.click($event),$scope.$$phase?void 0:$scope.$apply()}),$rootScope.$on("Tiles:Updated",function(){return update()})}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvdGlsZS5jb2ZmZWUiLCJkaXJlY3RpdmVzL3RpbGUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImRpcmVjdGl2ZSIsIiRwYXJzZSIsIiRyb290U2NvcGUiLCJ0ZW1wbGF0ZVVybCIsInJlc3RyaWN0IiwicmVwbGFjZSIsIiRzY29wZSIsInRpbGUiLCJuZ0NsYXNzIiwibGluayIsIiRlbCIsImF0dHJzIiwiaXNDbGVhciIsIm9uQ2xpY2siLCJ0aWxlQWRqYWNlbnRNaW5lcyIsInRpbGVJc0ZsYWdnZWQiLCJ0aWxlSXNNaW5lIiwidXBkYXRlIiwidXBkYXRlQ2xhc3NlcyIsInVwZGF0ZVRleHQiLCJtb2RlbCIsImlzRmxhZ2dlZCIsImlzTWluZSIsInRleHQiLCJTdHJpbmciLCJhZGphY2VudE1pbmVzIiwieCIsImFkZENsYXNzIiwiZWxDbGFzcyIsImVsQ2xhc3NlcyIsInNob3VsZEF0dGFjaCIsIl9yZXN1bHRzIiwiZmxhZ2dlZCIsImNsZWFyIiwibWluZSIsInplcm8iLCJwdXNoIiwicmVtb3ZlQ2xhc3MiLCIkZXZlbnQiLCJjbGljayIsImJpbmQiLCIkJHBoYXNlIiwiJGFwcGx5IiwiJG9uIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFDQ0MsT0FBTyxXQUVQQyxVQUFVLE9BQVEsU0FDZkMsT0FDQUMsWUFFQSxPQUNJQyxZQUFhLGlDQUNiQyxTQUFVLElBQ1ZDLFNBQVMsRUFDVEMsUUFDSUMsS0FBTSxRQUNOQyxRQUFTLFlBQ2JDLEtBQU0sU0FBQ0gsT0FBUUksSUFBS0MsT0FDaEIsR0FBQUMsU0FBQUMsUUFBQUMsa0JBQUFDLGNBQUFDLFdBQUFDLE9BQUFDLGNBQUFDLFVDb0ROLE9EcERNUCxTQUFVTixPQUFPQyxLQUFLYSxNQUFNUixXQUFXLEVBRXZDRyxjQUFnQixXQ0pwQixNREtRVCxRQUFPQyxLQUFLYSxNQUFNUixXQUFhLEdBQy9CTixPQUFPQyxLQUFLYSxNQUFNQyxhQUFhLEdBRW5DTCxXQUFhLFdDTGpCLE1ETVFWLFFBQU9DLEtBQUthLE1BQU1SLFdBQVcsR0FDN0JOLE9BQU9DLEtBQUthLE1BQU1FLFVBQVUsR0FFaENSLGtCQUFvQixXQ054QixNRE9RUixRQUFPQyxLQUFLYSxNQUFNUixXQUFXLEdBQVNOLE9BQU9DLEtBQUthLE1BQU1FLFVBQVUsR0FHdEVILFdBQWEsV0FDVCxNQUFHSixpQkFDQ1QsT0FBT2lCLEtBQU8sSUFDVlAsYUFDSlYsT0FBT2lCLEtBQU8sSUFDVlQsb0JBQ0pSLE9BQU9pQixLQUFPQyxPQUFPbEIsT0FBT0MsS0FBS2EsTUFBTUssZUFEdEMsUUFHaUIsSUFBdkJuQixPQUFPQyxLQUFLYSxNQUFNTSxHQUNqQmhCLElBQUlpQixTQUFTLE9BRWpCVCxjQUFnQixXQUNaLEdBQUFVLFNBQUFDLFVBQUFDLGFBQUFDLFFBQUFGLFlBQ0lHLFFBQVVqQixnQkFDVmtCLE1BQVUzQixPQUFPQyxLQUFLYSxNQUFNUixXQUFXLEVBQ3ZDc0IsS0FBVWxCLGFBQ1ZtQixLQUE2QyxJQUFuQzdCLE9BQU9DLEtBQUthLE1BQU1LLGVBQXVCbkIsT0FBT0MsS0FBS2EsTUFBTVIsV0FBVyxHQUVwRm1CLFdDTFIsS0RLUUgsVUFBQUMsV0NKTkMsYUFBZUQsVUFBVUQsU0FFdkJHLFNBQVNLLEtER0VOLGFBQ0NwQixJQUFJaUIsU0FBU0MsU0FFYmxCLElBQUkyQixZQUFZVCxTQ0RoQyxPQUFPRyxXREdIZCxPQUFTLFdDQ2IsTURBUUUsY0FDQUQsaUJBRUpELFNBRUFKLFFBQVUsU0FBQ3lCLFFDQWYsTURDUWhDLFFBQU9DLEtBQUtnQyxNQUFNRCxRQUNsQnJCLFVBRUpQLElBQUk4QixLQUFLLFFBQVMsU0FBQ0YsUUFFZixNQURBaEMsUUFBT0MsS0FBS2dDLE1BQU1ELFFBQ2ZoQyxPQUFRbUMsUUFBWCxPQUF3Qm5DLE9BQU9vQyxXQUVuQ3hDLFdBQVd5QyxJQUFJLGdCQUFpQixXQ0NwQyxNREFRMUIiLCJmaWxlIjoiZGlyZWN0aXZlcy90aWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhclxuLm1vZHVsZSAndGlsZScsIFtdXG5cbi5kaXJlY3RpdmUgJ3RpbGUnLCAoXG4gICAgJHBhcnNlLFxuICAgICRyb290U2NvcGVcbikgLT5cbiAgICByZXR1cm4ge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCIvUmVzb3VyY2VzL3RlbXBsYXRlcy90aWxlLmh0bWxcIlxuICAgICAgICByZXN0cmljdDogJ0EnXG4gICAgICAgIHJlcGxhY2U6IHRydWVcbiAgICAgICAgJHNjb3BlOlxuICAgICAgICAgICAgdGlsZTogJz10aWxlJ1xuICAgICAgICAgICAgbmdDbGFzczogJz1uZ0NsYXNzJ1xuICAgICAgICBsaW5rOiAoJHNjb3BlLCAkZWwsIGF0dHJzKSAtPlxuICAgICAgICAgICAgaXNDbGVhciA9ICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgaXMgdHJ1ZVxuXG4gICAgICAgICAgICB0aWxlSXNGbGFnZ2VkID0gLT5cbiAgICAgICAgICAgICAgICAkc2NvcGUudGlsZS5tb2RlbC5pc0NsZWFyIGlzbnQgdHJ1ZSBhbmRcbiAgICAgICAgICAgICAgICAkc2NvcGUudGlsZS5tb2RlbC5pc0ZsYWdnZWQgaXMgdHJ1ZVxuXG4gICAgICAgICAgICB0aWxlSXNNaW5lID0gLT5cbiAgICAgICAgICAgICAgICAkc2NvcGUudGlsZS5tb2RlbC5pc0NsZWFyIGlzIHRydWUgYW5kXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRpbGUubW9kZWwuaXNNaW5lIGlzIHRydWVcblxuICAgICAgICAgICAgdGlsZUFkamFjZW50TWluZXMgPSAtPlxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgPT0gdHJ1ZSBhbmQgJHNjb3BlLnRpbGUubW9kZWwuaXNNaW5lID09IGZhbHNlXG5cblxuICAgICAgICAgICAgdXBkYXRlVGV4dCA9IC0+XG4gICAgICAgICAgICAgICAgaWYgdGlsZUlzRmxhZ2dlZCgpXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJz8nXG4gICAgICAgICAgICAgICAgZWxzZSBpZiB0aWxlSXNNaW5lKClcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnWCdcbiAgICAgICAgICAgICAgICBlbHNlIGlmIHRpbGVBZGphY2VudE1pbmVzKClcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSBTdHJpbmcgJHNjb3BlLnRpbGUubW9kZWwuYWRqYWNlbnRNaW5lc1xuXG4gICAgICAgICAgICBpZiAkc2NvcGUudGlsZS5tb2RlbC54IGlzIDBcbiAgICAgICAgICAgICAgICAkZWwuYWRkQ2xhc3MgJ250aCdcblxuICAgICAgICAgICAgdXBkYXRlQ2xhc3NlcyA9IC0+XG4gICAgICAgICAgICAgICAgZWxDbGFzc2VzID0ge1xuICAgICAgICAgICAgICAgICAgICBmbGFnZ2VkIDogdGlsZUlzRmxhZ2dlZCgpXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyICAgOiAkc2NvcGUudGlsZS5tb2RlbC5pc0NsZWFyIGlzIHRydWVcbiAgICAgICAgICAgICAgICAgICAgbWluZSAgICA6IHRpbGVJc01pbmUoKVxuICAgICAgICAgICAgICAgICAgICB6ZXJvICAgIDogJHNjb3BlLnRpbGUubW9kZWwuYWRqYWNlbnRNaW5lcyBpcyAwIGFuZCAkc2NvcGUudGlsZS5tb2RlbC5pc0NsZWFyIGlzIHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIGVsQ2xhc3MsIHNob3VsZEF0dGFjaCBvZiBlbENsYXNzZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgc2hvdWxkQXR0YWNoXG4gICAgICAgICAgICAgICAgICAgICAgICAkZWwuYWRkQ2xhc3MgZWxDbGFzc1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAkZWwucmVtb3ZlQ2xhc3MgZWxDbGFzc1xuXG4gICAgICAgICAgICB1cGRhdGUgPSAtPlxuICAgICAgICAgICAgICAgIHVwZGF0ZVRleHQoKVxuICAgICAgICAgICAgICAgIHVwZGF0ZUNsYXNzZXMoKVxuXG4gICAgICAgICAgICB1cGRhdGUoKVxuXG4gICAgICAgICAgICBvbkNsaWNrID0gKCRldmVudCkgLT5cbiAgICAgICAgICAgICAgICAkc2NvcGUudGlsZS5jbGljayAkZXZlbnRcbiAgICAgICAgICAgICAgICB1cGRhdGUoKVxuXG4gICAgICAgICAgICAkZWwuYmluZCAnY2xpY2snLCAoJGV2ZW50KSAtPlxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLmNsaWNrICRldmVudFxuICAgICAgICAgICAgICAgIGlmICEkc2NvcGUuJCRwaGFzZSB0aGVuICRzY29wZS4kYXBwbHkoKVxuXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbiAnVGlsZXM6VXBkYXRlZCcsIC0+XG4gICAgICAgICAgICAgICAgdXBkYXRlKClcbiAgICB9IixudWxsXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=