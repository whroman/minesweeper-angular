angular.module("tile",[]).directive("tile",function($parse){return console.log("foo"),{link:function($scope,el,attrs){return console.log("adsf")},template:"{{text}}",restrict:"A",$scope:{tile:"=tile",ngClass:"=ngClass"},link:function($scope,$el,attrs){var isClear,onClick,tileAdjacentMines,tileIsFlagged,tileIsMine;return isClear=$scope.tile.model.isClear===!0,tileIsFlagged=$scope.tile.model.isClear!==!0&&$scope.tile.model.isFlagged===!0,tileIsMine=$scope.tile.model.isClear===!0&&$scope.tile.model.isMine===!0,tileAdjacentMines=$scope.tile.model.isClear===!0&&$scope.tile.model.isMine===!1,tileIsFlagged?$scope.text="?":tileIsMine?$scope.text="X":tileAdjacentMines&&($scope.text=$scope.tile.model.adjacentMines),0===$scope.tile.model.x&&$el.addClass("nth"),onClick=function($event){var elClass,elClasses,flagKeyIsSet,shouldAttach,_results;flagKeyIsSet=$event&&($event.shiftKey===!0||$event.altKey===!0),flagKeyIsSet?$scope.tile.toggleFlag():(console.log("s"),$scope.tile.clear()),elClasses={flagged:$scope.tile.model.isFlagged===!0,clear:$scope.tile.model.isClear===!0,mine:$scope.tile.model.isMine===!0&&$scope.tile.model.isClear===!0,zero:0===$scope.tile.model.adjacentMines&&$scope.tile.model.isClear===!0},_results=[];for(elClass in elClasses)shouldAttach=elClasses[elClass],console.log("key, val"),console.log(elClass,shouldAttach),_results.push(shouldAttach?$el.addClass(elClass):$el.removeClass(elClass));return _results},$el.bind("click",onClick)}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRpbGUuY29mZmVlIiwidGlsZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiZGlyZWN0aXZlIiwiJHBhcnNlIiwiY29uc29sZSIsImxvZyIsImxpbmsiLCIkc2NvcGUiLCJlbCIsImF0dHJzIiwidGVtcGxhdGUiLCJyZXN0cmljdCIsInRpbGUiLCJuZ0NsYXNzIiwiJGVsIiwiaXNDbGVhciIsIm9uQ2xpY2siLCJ0aWxlQWRqYWNlbnRNaW5lcyIsInRpbGVJc0ZsYWdnZWQiLCJ0aWxlSXNNaW5lIiwibW9kZWwiLCJpc0ZsYWdnZWQiLCJpc01pbmUiLCJ0ZXh0IiwiYWRqYWNlbnRNaW5lcyIsIngiLCJhZGRDbGFzcyIsIiRldmVudCIsImVsQ2xhc3MiLCJlbENsYXNzZXMiLCJmbGFnS2V5SXNTZXQiLCJzaG91bGRBdHRhY2giLCJfcmVzdWx0cyIsInNoaWZ0S2V5IiwiYWx0S2V5IiwidG9nZ2xlRmxhZyIsImNsZWFyIiwiZmxhZ2dlZCIsIm1pbmUiLCJ6ZXJvIiwicHVzaCIsInJlbW92ZUNsYXNzIiwiYmluZCJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQ0NDLE9BQU8sV0FFUEMsVUFBVSxPQUFRLFNBQUNDLFFBRWhCLE1BREFDLFNBQVFDLElBQUksUUFFUkMsS0FBTSxTQUFDQyxPQUFRQyxHQUFJQyxPQ0ZyQixNREdNTCxTQUFRQyxJQUFJLFNBQ2hCSyxTQUFVLFdBQ1ZDLFNBQVUsSUFDVkosUUFDSUssS0FBTSxRQUNOQyxRQUFTLFlBQ2JQLEtBQU0sU0FBQ0MsT0FBUU8sSUFBS0wsT0FDaEIsR0FBQU0sU0FBQUMsUUFBQUMsa0JBQUFDLGNBQUFDLFVDMENOLE9EMUNNSixTQUFVUixPQUFPSyxLQUFLUSxNQUFNTCxXQUFXLEVBRXZDRyxjQUNJWCxPQUFPSyxLQUFLUSxNQUFNTCxXQUFhLEdBQy9CUixPQUFPSyxLQUFLUSxNQUFNQyxhQUFhLEVBR25DRixXQUNJWixPQUFPSyxLQUFLUSxNQUFNTCxXQUFXLEdBQzdCUixPQUFPSyxLQUFLUSxNQUFNRSxVQUFVLEVBR2hDTCxrQkFDSVYsT0FBT0ssS0FBS1EsTUFBTUwsV0FBVyxHQUM3QlIsT0FBT0ssS0FBS1EsTUFBTUUsVUFBVSxFQUc3QkosY0FDQ1gsT0FBT2dCLEtBQU8sSUFDVkosV0FDSlosT0FBT2dCLEtBQU8sSUFDVk4sb0JBQ0pWLE9BQU9nQixLQUFPaEIsT0FBT0ssS0FBS1EsTUFBTUksZUFHVixJQUF2QmpCLE9BQU9LLEtBQUtRLE1BQU1LLEdBQ2pCWCxJQUFJWSxTQUFTLE9BRWpCVixRQUFVLFNBQUNXLFFBQ1AsR0FBQUMsU0FBQUMsVUFBQUMsYUFBQUMsYUFBQUMsUUFBQUYsY0FDSUgsU0FFSUEsT0FBT00sWUFBWSxHQUNuQk4sT0FBT08sVUFBVSxHQUl0QkosYUFDQ3ZCLE9BQU9LLEtBQUt1QixjQUVaL0IsUUFBUUMsSUFBSSxLQUVaRSxPQUFPSyxLQUFLd0IsU0FFaEJQLFdBQ0lRLFFBQVU5QixPQUFPSyxLQUFLUSxNQUFNQyxhQUFhLEVBQ3pDZSxNQUFVN0IsT0FBT0ssS0FBS1EsTUFBTUwsV0FBVyxFQUN2Q3VCLEtBQVUvQixPQUFPSyxLQUFLUSxNQUFNRSxVQUFVLEdBQVNmLE9BQU9LLEtBQUtRLE1BQU1MLFdBQVcsRUFDNUV3QixLQUE2QyxJQUFuQ2hDLE9BQU9LLEtBQUtRLE1BQU1JLGVBQXVCakIsT0FBT0ssS0FBS1EsTUFBTUwsV0FBVyxHQUdwRmlCLFdDckJSLEtEcUJRSixVQUFBQyxXQ3BCTkUsYUFBZUYsVUFBVUQsU0RxQmZ4QixRQUFRQyxJQUFJLFlBQ1pELFFBQVFDLElBQUl1QixRQUFTRyxjQ2xCN0JDLFNBQVNRLEtEbUJHVCxhQUNBakIsSUFBSVksU0FBU0UsU0FFYmQsSUFBSTJCLFlBQVliLFNDakJoQyxPQUFPSSxXRG9CSGxCLElBQUk0QixLQUFLLFFBQVMxQiIsImZpbGUiOiJ0aWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhclxuLm1vZHVsZSAndGlsZScsIFtdXG5cbi5kaXJlY3RpdmUgJ3RpbGUnLCAoJHBhcnNlKSAtPlxuICAgIGNvbnNvbGUubG9nKCdmb28nKVxuICAgIHJldHVybiB7XG4gICAgICAgIGxpbms6ICgkc2NvcGUsIGVsLCBhdHRycykgLT5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nICdhZHNmJ1xuICAgICAgICB0ZW1wbGF0ZTogXCJ7e3RleHR9fVwiXG4gICAgICAgIHJlc3RyaWN0OiAnQSdcbiAgICAgICAgJHNjb3BlOlxuICAgICAgICAgICAgdGlsZTogJz10aWxlJ1xuICAgICAgICAgICAgbmdDbGFzczogJz1uZ0NsYXNzJ1xuICAgICAgICBsaW5rOiAoJHNjb3BlLCAkZWwsIGF0dHJzKSAtPlxuICAgICAgICAgICAgaXNDbGVhciA9ICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgaXMgdHJ1ZVxuXG4gICAgICAgICAgICB0aWxlSXNGbGFnZ2VkID0gKFxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgaXNudCB0cnVlIGFuZFxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzRmxhZ2dlZCBpcyB0cnVlXG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIHRpbGVJc01pbmUgPSAoXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRpbGUubW9kZWwuaXNDbGVhciBpcyB0cnVlIGFuZFxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzTWluZSBpcyB0cnVlXG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIHRpbGVBZGphY2VudE1pbmVzID0gKFxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgPT0gdHJ1ZSAmJlxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzTWluZSA9PSBmYWxzZVxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICBpZiB0aWxlSXNGbGFnZ2VkXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnPydcbiAgICAgICAgICAgIGVsc2UgaWYgdGlsZUlzTWluZVxuICAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ1gnXG4gICAgICAgICAgICBlbHNlIGlmIHRpbGVBZGphY2VudE1pbmVzXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAkc2NvcGUudGlsZS5tb2RlbC5hZGphY2VudE1pbmVzXG5cblxuICAgICAgICAgICAgaWYgJHNjb3BlLnRpbGUubW9kZWwueCBpcyAwXG4gICAgICAgICAgICAgICAgJGVsLmFkZENsYXNzICdudGgnXG5cbiAgICAgICAgICAgIG9uQ2xpY2sgPSAoJGV2ZW50KSAtPlxuICAgICAgICAgICAgICAgIGZsYWdLZXlJc1NldCA9IChcbiAgICAgICAgICAgICAgICAgICAgJGV2ZW50ICYmXG4gICAgICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC5zaGlmdEtleSBpcyB0cnVlIG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQuYWx0S2V5IGlzIHRydWVcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgIGlmIGZsYWdLZXlJc1NldFxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGlsZS50b2dnbGVGbGFnKClcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nICdzJ1xuICAgICAgICAgICAgICAgICAgICAjIG5vTWluZUZpcnN0Q2xpY2sgJHNjb3BlLnRpbGVcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRpbGUuY2xlYXIoKVxuXG4gICAgICAgICAgICAgICAgZWxDbGFzc2VzID0ge1xuICAgICAgICAgICAgICAgICAgICBmbGFnZ2VkIDogJHNjb3BlLnRpbGUubW9kZWwuaXNGbGFnZ2VkIGlzIHRydWVcbiAgICAgICAgICAgICAgICAgICAgY2xlYXIgICA6ICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgaXMgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBtaW5lICAgIDogJHNjb3BlLnRpbGUubW9kZWwuaXNNaW5lIGlzIHRydWUgYW5kICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgaXMgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB6ZXJvICAgIDogJHNjb3BlLnRpbGUubW9kZWwuYWRqYWNlbnRNaW5lcyBpcyAwIGFuZCAkc2NvcGUudGlsZS5tb2RlbC5pc0NsZWFyIGlzIHRydWVcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgZWxDbGFzcywgc2hvdWxkQXR0YWNoIG9mIGVsQ2xhc3Nlc1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyAna2V5LCB2YWwnXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIGVsQ2xhc3MsIHNob3VsZEF0dGFjaFxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkQXR0YWNoKVxuICAgICAgICAgICAgICAgICAgICAgICAgJGVsLmFkZENsYXNzIGVsQ2xhc3NcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgJGVsLnJlbW92ZUNsYXNzIGVsQ2xhc3NcblxuXG4gICAgICAgICAgICAkZWwuYmluZCAnY2xpY2snLCBvbkNsaWNrXG5cblxuICAgIH1cblxuXG4jIGFuZ3VsYXJcbiMgLm1vZHVsZSgnZm9jdXNXaGVuJywgW10pXG4jIC5kaXJlY3RpdmUoJ2ZvY3VzV2hlbicsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkcGFyc2UpIHtcbiMgICByZXR1cm4ge1xuIyAgICAgbGluazogZnVuY3Rpb24gKCRzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiMgICAgICAgdmFyIG1vZGVsID0gJHBhcnNlKGF0dHJzLmZvY3VzV2hlbik7XG4jICAgICAgICRzY29wZS4kd2F0Y2gobW9kZWwsIGZ1bmN0aW9uKHZhbHVlKSB7XG4jICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4jICAgICAgICAgICAvLyAkdGltZW91dCBpbiBwbGFjZSB0byBnaXZlIGVsZW1lbnRzIHRpbWUgdG8gcmVuZGVyXG4jICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiMgICAgICAgICAgICAgZWxlbWVudFswXS5mb2N1cygpO1xuIyAgICAgICAgICAgfSk7XG4jICAgICAgICAgfVxuIyAgICAgICB9KTtcblxuIyAgICAgICBlbGVtZW50LmJpbmQoJ2JsdXInLCBmdW5jdGlvbigpIHtcbiMgICAgICAgICAgJHNjb3BlLiRhcHBseShtb2RlbC5hc3NpZ24oJHNjb3BlLCBmYWxzZSkpO1xuIyAgICAgICB9KTtcbiMgICAgIH1cbiMgICB9O1xuIyB9KTsiLG51bGxdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==