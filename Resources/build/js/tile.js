angular.module("tile",[]).directive("tile",function($parse){return{link:function($scope,el,attrs){return console.log("adsf")},template:"{{text}}",restrict:"A",$scope:{tile:"=tile",ngClass:"=ngClass"},link:function($scope,$el,attrs){var isClear,onClick,tileAdjacentMines,tileIsFlagged,tileIsMine,updateClasses;return isClear=$scope.tile.model.isClear===!0,tileIsFlagged=$scope.tile.model.isClear!==!0&&$scope.tile.model.isFlagged===!0,tileIsMine=$scope.tile.model.isClear===!0&&$scope.tile.model.isMine===!0,tileAdjacentMines=$scope.tile.model.isClear===!0&&$scope.tile.model.isMine===!1,tileIsFlagged?$scope.text="?":tileIsMine?$scope.text="X":tileAdjacentMines&&($scope.text=$scope.tile.model.adjacentMines),0===$scope.tile.model.x&&$el.addClass("nth"),updateClasses=function(){var elClass,elClasses,shouldAttach,_results;elClasses={flagged:$scope.tile.model.isFlagged===!0,clear:$scope.tile.model.isClear===!0,mine:$scope.tile.model.isMine===!0&&$scope.tile.model.isClear===!0,zero:0===$scope.tile.model.adjacentMines&&$scope.tile.model.isClear===!0},_results=[];for(elClass in elClasses)shouldAttach=elClasses[elClass],console.log("key, val"),console.log(elClass,shouldAttach),_results.push(shouldAttach?$el.addClass(elClass):$el.removeClass(elClass));return _results},onClick=function($event){var flagKeyIsSet;return flagKeyIsSet=$event&&($event.shiftKey===!0||$event.altKey===!0),flagKeyIsSet?$scope.tile.toggleFlag():(console.log("s"),$scope.tile.clear())},$el.bind("click",onClick)}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRpbGUuY29mZmVlIiwidGlsZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiZGlyZWN0aXZlIiwiJHBhcnNlIiwibGluayIsIiRzY29wZSIsImVsIiwiYXR0cnMiLCJjb25zb2xlIiwibG9nIiwidGVtcGxhdGUiLCJyZXN0cmljdCIsInRpbGUiLCJuZ0NsYXNzIiwiJGVsIiwiaXNDbGVhciIsIm9uQ2xpY2siLCJ0aWxlQWRqYWNlbnRNaW5lcyIsInRpbGVJc0ZsYWdnZWQiLCJ0aWxlSXNNaW5lIiwidXBkYXRlQ2xhc3NlcyIsIm1vZGVsIiwiaXNGbGFnZ2VkIiwiaXNNaW5lIiwidGV4dCIsImFkamFjZW50TWluZXMiLCJ4IiwiYWRkQ2xhc3MiLCJlbENsYXNzIiwiZWxDbGFzc2VzIiwic2hvdWxkQXR0YWNoIiwiX3Jlc3VsdHMiLCJmbGFnZ2VkIiwiY2xlYXIiLCJtaW5lIiwiemVybyIsInB1c2giLCJyZW1vdmVDbGFzcyIsIiRldmVudCIsImZsYWdLZXlJc1NldCIsInNoaWZ0S2V5IiwiYWx0S2V5IiwidG9nZ2xlRmxhZyIsImJpbmQiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUNDQyxPQUFPLFdBRVBDLFVBQVUsT0FBUSxTQUFDQyxRQUNoQixPQUNJQyxLQUFNLFNBQUNDLE9BQVFDLEdBQUlDLE9DRnJCLE1ER01DLFNBQVFDLElBQUksU0FDaEJDLFNBQVUsV0FDVkMsU0FBVSxJQUNWTixRQUNJTyxLQUFNLFFBQ05DLFFBQVMsWUFDYlQsS0FBTSxTQUFDQyxPQUFRUyxJQUFLUCxPQUNoQixHQUFBUSxTQUFBQyxRQUFBQyxrQkFBQUMsY0FBQUMsV0FBQUMsYUM2Q04sT0Q3Q01MLFNBQVVWLE9BQU9PLEtBQUtTLE1BQU1OLFdBQVcsRUFFdkNHLGNBQ0liLE9BQU9PLEtBQUtTLE1BQU1OLFdBQWEsR0FDL0JWLE9BQU9PLEtBQUtTLE1BQU1DLGFBQWEsRUFHbkNILFdBQ0lkLE9BQU9PLEtBQUtTLE1BQU1OLFdBQVcsR0FDN0JWLE9BQU9PLEtBQUtTLE1BQU1FLFVBQVUsRUFHaENOLGtCQUNJWixPQUFPTyxLQUFLUyxNQUFNTixXQUFXLEdBQzdCVixPQUFPTyxLQUFLUyxNQUFNRSxVQUFVLEVBRzdCTCxjQUNDYixPQUFPbUIsS0FBTyxJQUNWTCxXQUNKZCxPQUFPbUIsS0FBTyxJQUNWUCxvQkFDSlosT0FBT21CLEtBQU9uQixPQUFPTyxLQUFLUyxNQUFNSSxlQUdWLElBQXZCcEIsT0FBT08sS0FBS1MsTUFBTUssR0FDakJaLElBQUlhLFNBQVMsT0FFakJQLGNBQWdCLFdBQ1osR0FBQVEsU0FBQUMsVUFBQUMsYUFBQUMsUUFBQUYsWUFDSUcsUUFBVTNCLE9BQU9PLEtBQUtTLE1BQU1DLGFBQWEsRUFDekNXLE1BQVU1QixPQUFPTyxLQUFLUyxNQUFNTixXQUFXLEVBQ3ZDbUIsS0FBVTdCLE9BQU9PLEtBQUtTLE1BQU1FLFVBQVUsR0FBU2xCLE9BQU9PLEtBQUtTLE1BQU1OLFdBQVcsRUFDNUVvQixLQUE2QyxJQUFuQzlCLE9BQU9PLEtBQUtTLE1BQU1JLGVBQXVCcEIsT0FBT08sS0FBS1MsTUFBTU4sV0FBVyxHQUVwRmdCLFdDWlIsS0RZUUgsVUFBQUMsV0NYTkMsYUFBZUQsVUFBVUQsU0RZZnBCLFFBQVFDLElBQUksWUFDWkQsUUFBUUMsSUFBSW1CLFFBQVNFLGNDVDdCQyxTQUFTSyxLRFVHTixhQUNBaEIsSUFBSWEsU0FBU0MsU0FFYmQsSUFBSXVCLFlBQVlULFNDUmhDLE9BQU9HLFdEVUhmLFFBQVUsU0FBQ3NCLFFBQ1AsR0FBQUMsYUFRQSxPQVJBQSxjQUNJRCxTQUVJQSxPQUFPRSxZQUFZLEdBQ25CRixPQUFPRyxVQUFVLEdBSXRCRixhQUNDbEMsT0FBT08sS0FBSzhCLGNBRVpsQyxRQUFRQyxJQUFJLEtBRVpKLE9BQU9PLEtBQUtxQixVQUdwQm5CLElBQUk2QixLQUFLLFFBQVMzQiIsImZpbGUiOiJ0aWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhclxuLm1vZHVsZSAndGlsZScsIFtdXG5cbi5kaXJlY3RpdmUgJ3RpbGUnLCAoJHBhcnNlKSAtPlxuICAgIHJldHVybiB7XG4gICAgICAgIGxpbms6ICgkc2NvcGUsIGVsLCBhdHRycykgLT5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nICdhZHNmJ1xuICAgICAgICB0ZW1wbGF0ZTogXCJ7e3RleHR9fVwiXG4gICAgICAgIHJlc3RyaWN0OiAnQSdcbiAgICAgICAgJHNjb3BlOlxuICAgICAgICAgICAgdGlsZTogJz10aWxlJ1xuICAgICAgICAgICAgbmdDbGFzczogJz1uZ0NsYXNzJ1xuICAgICAgICBsaW5rOiAoJHNjb3BlLCAkZWwsIGF0dHJzKSAtPlxuICAgICAgICAgICAgaXNDbGVhciA9ICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgaXMgdHJ1ZVxuXG4gICAgICAgICAgICB0aWxlSXNGbGFnZ2VkID0gKFxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgaXNudCB0cnVlIGFuZFxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzRmxhZ2dlZCBpcyB0cnVlXG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIHRpbGVJc01pbmUgPSAoXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRpbGUubW9kZWwuaXNDbGVhciBpcyB0cnVlIGFuZFxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzTWluZSBpcyB0cnVlXG4gICAgICAgICAgICApXG5cbiAgICAgICAgICAgIHRpbGVBZGphY2VudE1pbmVzID0gKFxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzQ2xlYXIgPT0gdHJ1ZSAmJlxuICAgICAgICAgICAgICAgICRzY29wZS50aWxlLm1vZGVsLmlzTWluZSA9PSBmYWxzZVxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICBpZiB0aWxlSXNGbGFnZ2VkXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnPydcbiAgICAgICAgICAgIGVsc2UgaWYgdGlsZUlzTWluZVxuICAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ1gnXG4gICAgICAgICAgICBlbHNlIGlmIHRpbGVBZGphY2VudE1pbmVzXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAkc2NvcGUudGlsZS5tb2RlbC5hZGphY2VudE1pbmVzXG5cblxuICAgICAgICAgICAgaWYgJHNjb3BlLnRpbGUubW9kZWwueCBpcyAwXG4gICAgICAgICAgICAgICAgJGVsLmFkZENsYXNzICdudGgnXG5cbiAgICAgICAgICAgIHVwZGF0ZUNsYXNzZXMgPSAtPlxuICAgICAgICAgICAgICAgIGVsQ2xhc3NlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgZmxhZ2dlZCA6ICRzY29wZS50aWxlLm1vZGVsLmlzRmxhZ2dlZCBpcyB0cnVlXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyICAgOiAkc2NvcGUudGlsZS5tb2RlbC5pc0NsZWFyIGlzIHRydWVcbiAgICAgICAgICAgICAgICAgICAgbWluZSAgICA6ICRzY29wZS50aWxlLm1vZGVsLmlzTWluZSBpcyB0cnVlIGFuZCAkc2NvcGUudGlsZS5tb2RlbC5pc0NsZWFyIGlzIHRydWVcbiAgICAgICAgICAgICAgICAgICAgemVybyAgICA6ICRzY29wZS50aWxlLm1vZGVsLmFkamFjZW50TWluZXMgaXMgMCBhbmQgJHNjb3BlLnRpbGUubW9kZWwuaXNDbGVhciBpcyB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciBlbENsYXNzLCBzaG91bGRBdHRhY2ggb2YgZWxDbGFzc2VzXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nICdrZXksIHZhbCdcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cgZWxDbGFzcywgc2hvdWxkQXR0YWNoXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGRBdHRhY2gpXG4gICAgICAgICAgICAgICAgICAgICAgICAkZWwuYWRkQ2xhc3MgZWxDbGFzc1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAkZWwucmVtb3ZlQ2xhc3MgZWxDbGFzc1xuXG4gICAgICAgICAgICBvbkNsaWNrID0gKCRldmVudCkgLT5cbiAgICAgICAgICAgICAgICBmbGFnS2V5SXNTZXQgPSAoXG4gICAgICAgICAgICAgICAgICAgICRldmVudCAmJlxuICAgICAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQuc2hpZnRLZXkgaXMgdHJ1ZSBvclxuICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LmFsdEtleSBpcyB0cnVlXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG5cbiAgICAgICAgICAgICAgICBpZiBmbGFnS2V5SXNTZXRcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRpbGUudG9nZ2xlRmxhZygpXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyAncydcbiAgICAgICAgICAgICAgICAgICAgIyBub01pbmVGaXJzdENsaWNrICRzY29wZS50aWxlXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50aWxlLmNsZWFyKClcblxuXG4gICAgICAgICAgICAkZWwuYmluZCAnY2xpY2snLCBvbkNsaWNrXG5cblxuICAgIH1cblxuXG4jIGFuZ3VsYXJcbiMgLm1vZHVsZSgnZm9jdXNXaGVuJywgW10pXG4jIC5kaXJlY3RpdmUoJ2ZvY3VzV2hlbicsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkcGFyc2UpIHtcbiMgICByZXR1cm4ge1xuIyAgICAgbGluazogZnVuY3Rpb24gKCRzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiMgICAgICAgdmFyIG1vZGVsID0gJHBhcnNlKGF0dHJzLmZvY3VzV2hlbik7XG4jICAgICAgICRzY29wZS4kd2F0Y2gobW9kZWwsIGZ1bmN0aW9uKHZhbHVlKSB7XG4jICAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4jICAgICAgICAgICAvLyAkdGltZW91dCBpbiBwbGFjZSB0byBnaXZlIGVsZW1lbnRzIHRpbWUgdG8gcmVuZGVyXG4jICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiMgICAgICAgICAgICAgZWxlbWVudFswXS5mb2N1cygpO1xuIyAgICAgICAgICAgfSk7XG4jICAgICAgICAgfVxuIyAgICAgICB9KTtcblxuIyAgICAgICBlbGVtZW50LmJpbmQoJ2JsdXInLCBmdW5jdGlvbigpIHtcbiMgICAgICAgICAgJHNjb3BlLiRhcHBseShtb2RlbC5hc3NpZ24oJHNjb3BlLCBmYWxzZSkpO1xuIyAgICAgICB9KTtcbiMgICAgIH1cbiMgICB9O1xuIyB9KTsiLG51bGxdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==